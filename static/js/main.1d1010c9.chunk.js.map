{"version":3,"sources":["webpack:///./src/index.css?552e","index.css","styles.ts","utils/colors.ts","containers/Menu/styles.ts","store/actions/quiz.ts","store/actions/actionTypes.ts","store/actions/startPage.ts","components/UI/Spinner/styles.ts","components/UI/Spinner/index.tsx","components/SettingPanel/styles.ts","components/SettingPanel/Inputs/ButtonInput/styles.ts","components/UI/Tile/styles.ts","components/UI/Tile/index.tsx","components/SettingPanel/Inputs/ButtonInput/config.ts","components/SettingPanel/Inputs/ButtonInput/index.tsx","components/SettingPanel/Inputs/CategoryInput/styles.ts","components/SettingPanel/Inputs/CategoryInput/index.tsx","components/SettingPanel/Inputs/SliderInput/styles.ts","components/UI/Slider/styles.ts","utils/keys.ts","components/UI/Slider/index.tsx","components/SettingPanel/Inputs/SliderInput/index.tsx","components/SettingPanel/index.tsx","components/UI/Button/styles.ts","components/UI/Button/index.tsx","containers/Menu/index.tsx","containers/Quiz/styles.ts","components/Question/styles.ts","components/Question/Answer/styles.ts","components/Question/Answer/index.tsx","components/Question/index.tsx","components/NavBar/styles.ts","components/NavBar/index.tsx","components/Summary/styles.ts","components/UI/Score/styles.ts","components/UI/Score/index.tsx","components/Summary/index.tsx","containers/Quiz/index.tsx","App.tsx","store/reducers/quiz.ts","store/reducers/startPage.ts","index.tsx"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","locals","exports","push","root","App","styled","div","_templateObject","PRIMARY_THEME","CORRECT","WRONG","GRAY","StartPage","styles_templateObject","Spinner","_templateObject2","Menu","_templateObject3","quizerIntro","keyframes","_templateObject4","Title","h1","_templateObject5","SubTitle","_templateObject6","initQuiz","dispatch","getState","apiURL","startPage","settings","reset","fetchQuestionsStart","axios","get","then","response","fetchQuestionsSuccess","data","results","shuffleAnswers","quizStarted","catch","err","fetchQuestionsFail","type","questions","error","fetchCategoriesStart","fetchCategoriesSuccess","trivia_categories","categories","fetchCategoriesFail","lds_dual_ring","Spinner_styles_templateObject","styles_templateObject2","react_default","a","createElement","Spinner_styles_Spinner","SettingPanel","SettingPanel_styles_templateObject","ButtonInput","ButtonInput_styles_templateObject","Label","ButtonInput_styles_templateObject2","ButtonsContainer","styles_templateObject3","Tile","Tile_styles_templateObject","props","selected","Tile_styles_templateObject2","Icon","FontAwesomeIcon","Tile_styles_templateObject3","styles_Tile","onClick","icon","faQuestion","styles_Label","header","icons","Any","ABCD","faList","True/False","faCheckSquare","Easy","faBaby","Medium","faGraduationCap","Hard","faCrown","getIcon","option","_ref","label","onChange","styles_ButtonInput","map","UI_Tile","key","CategoryInput","CategoryInput_styles_templateObject","CategoryInput_styles_templateObject2","SelectContainer","CategoryInput_styles_templateObject3","Select","ReactSelect","styles_templateObject4","optionsFormatted","category","value","id","name","filter","pop","styles_CategoryInput","CategoryInput_styles_Label","classNamePrefix","className","newCategory","SliderInput","SliderInput_styles_templateObject","ValueLabel","SliderInput_styles_templateObject2","SliderInput_styles_templateObject3","SliderContainer","SliderInput_styles_templateObject4","Slider","styles_templateObject5","KEYS","input","attrs","min","max","step","Slider_styles_templateObject","Slider_styles_Slider","e","target","styles_SliderInput","SliderInput_styles_Label","styles_Slider","UI_Slider","amount","difficulty","onAmountChange","onCategoryChange","onDifficultyChange","onTypeChange","styles_SettingPanel","Inputs_SliderInput","Inputs_CategoryInput","values","Inputs_ButtonInput","Button","Button_styles_templateObject","uppercase","size","bold","_ref$size","styles_Button","children","connect","loading","dataAvailable","dataFetched","init","generateURL","actions","setQuestionAmount","newAmount","setQuestionCategory","setQuestionType","newType","setQuestionDifficulty","newDifficulty","startPageRef","useRef","useEffect","current","focus","handleStartButtonClick","styles_StartPage","tabIndex","onKeyDown","console","log","ENTER","ref","styles_Spinner","UI_Spinner","components_SettingPanel","UI_Button","Quiz","Quiz_styles_templateObject","finished","StyleState","QuestionComponent","Question_styles_templateObject","Question","Question_styles_templateObject2","h3","Question_styles_templateObject3","CategoryLabel","p","Question_styles_templateObject4","AnswersContainer","Question_styles_templateObject5","isSelected","showAnswer","isCorrect","CorrectSelected","IncorrectSelected","Selected","CorrectNotSelected","Notselected","answerBackgroundColor","_answerBackgroundColo","Object","defineProperty","answerBorderColor","_answerBorderColor","Answer","Answer_styles_templateObject","checkboxBorderColor","_checkboxBorderColor","checkboxBorderWidth","_checkboxBorderWidth","Checkbox","Answer_styles_templateObject2","answer","reveal","styles_Answer","question","answers","correctId","onAnswerPicked","selectedId","categoryLabel","concat","styles_Question","unescape","Question_Answer","NavBar","NavBar_styles_templateObject","NavBar_styles_templateObject2","QuestionCounter","NavBar_styles_templateObject3","ButtonContainer","NavBar_styles_templateObject4","currentQuestionNumber","questionsAmount","onQuit","counterLabel","styles_NavBar","styles_Icon","faHome","Summary","Summary_styles_templateObject","AnswerContainer","Summary_styles_templateObject2","Summary_styles_templateObject3","_ref2","Summary_styles_templateObject4","CorrectAnswer","Summary_styles_templateObject5","Score","Score_styles_templateObject","Score_styles_templateObject2","StarsContainer","Score_styles_templateObject3","score","numOfFullStars","Math","round","numOfEmptyStars","styles_Score","Score_styles_Label","toConsumableArray","Array","star","index_es","fasStar","farStar","correctAnswers","styles_Summary","UI_Score","questionId","Summary_styles_Question","correct_answer","quiz","started","dataLoading","fetching","isDataAvailable","end","quit","_useState","useState","_useState2","slicedToArray","setFinished","_useState3","_useState4","questionNumber","setQuestionNumber","_useState5","_useState6","setCorrectAnswers","_useState7","_useState8","setSelectedId","quizRef","length","correctAnswerId","reduce","prev","curr","_useState9","_useState10","inRevealMode","setInRevealMode","buttonLabel","react_router","to","incorrect_answers","splice","handleButtonClick","isLastQuestion","handleAnswerPicked","selectedAnswerId","styles_Quiz","isBooleanQuestion","ESCAPE","ARROW_UP","ARROW_DOWN","ONE","TWO","THREE","FOUR","components_Summary","components_Question","components_NavBar","styles_App","containers_Quiz","containers_Menu","initialState","reducer","state","arguments","action","objectSpread","questionsWithAnswerId","forEach","answersAmmount","floor","random","quizQuit","_state$settings","categoryID","currCategory","selectedDifficulty","indexOf","selectedType","generateUrl","composeEnhancers","compose","rootReducer","combineReducers","quizReducer","startPageReducer","store","createStore","applyMiddleware","thunk","app","es","react_router_dom","src_App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d1010c9.chunk.js","sourcesContent":["\nvar content = require(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"* {\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  \\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Roboto\\\", \\\"Oxygen\\\",\\n    \\\"Ubuntu\\\", \\\"Cantarell\\\", \\\"Fira Sans\\\", \\\"Droid Sans\\\", \\\"Helvetica Neue\\\",\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\n#_1YYU_vdtEoCzbtmk8tBvTU {\\n  position: absolute;\\n  height: 100%;\\n  width: 100%;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \\\"Courier New\\\",\\n    monospace;\\n}\\n\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"root\": \"_1YYU_vdtEoCzbtmk8tBvTU\"\n};","import styled from 'styled-components';\r\n\r\nexport const App = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    padding: 0;  \r\n    text-align: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n    position: absolute;\r\n    \r\n    font-family: 'Roboto', sans-serif;\r\n    font-weight: 400;\r\n  \r\n    color: #02283B;\r\n    color: #125271;\r\n\r\n    background: white;\r\n`;","export const PRIMARY_THEME = {\r\n    LIGHT: '#3E7996',\r\n    BASE: '#125271',\r\n    DARK: '#022D41',\r\n};\r\n\r\nexport const CORRECT = {\r\n    BASE: '#46C28E',\r\n    LIGHT: '#E9F7F1',\r\n    //DARK: '', // TODO\r\n}\r\n\r\nexport const WRONG = {\r\n    BASE: '#EC5252',\r\n    LIGHT: '#FAEBEB',\r\n    //DARK: '', // TODO\r\n}\r\n\r\nexport const GRAY = {\r\n    BASE: '#D3D3D3',\r\n    LIGHT: '#F2F2F2',\r\n}","import styled, { keyframes } from \"styled-components\";\r\nimport { PRIMARY_THEME } from \"~/utils/colors\";\r\n\r\nexport const StartPage = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    align-self: center;\r\n    height: 50%;\r\n    width: 100%;\r\n    :focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n    height: 300px;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const Menu = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    max-width: 650px;\r\n`;\r\n\r\nconst quizerIntro = keyframes`\r\n    0% {\r\n        transform: scale(0, 0) rotate(0deg);\r\n    }\r\n    60% {\r\n        transform: scale(1.25, 1.25) rotate(360deg) skew(-15deg);\r\n    }\r\n    100% {\r\n        transform: scale(1.15, 1.25) rotate(355deg) skew(-10deg);\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    margin: 20px 0;\r\n    font-size: 6rem;\r\n    animation: ${quizerIntro} 0.4s 0.5s ease-out forwards;\r\n    background: none;\r\n    color: ${PRIMARY_THEME.BASE};\r\n    transform: scale(0, 0);\r\n`;\r\n\r\nexport const SubTitle = styled.div`\r\n    color: ${PRIMARY_THEME.BASE};\r\n`;","import * as actionTypes from './actionTypes';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { Dispatch } from 'react';\r\nimport { IQuestion } from '../reducers/quiz';\r\nimport { AppState } from \"~/index\"; \r\n\r\ninterface CategoriesServerData {\r\n    results: IQuestion[];\r\n};\r\n\r\nexport const initQuiz = () => {\r\n    return (dispatch: Dispatch<actionTypes.AllActions>, getState: () => AppState ) => {\r\n        const apiURL = getState().startPage.settings.apiURL;\r\n        dispatch(reset());\r\n        dispatch(fetchQuestionsStart());\r\n        axios.get(apiURL)\r\n            .then((response: AxiosResponse<CategoriesServerData>) => {\r\n                dispatch(fetchQuestionsSuccess(response.data.results));                \r\n            })\r\n            .then( () => {\r\n                dispatch(shuffleAnswers());\r\n                dispatch(quizStarted())\r\n            })\r\n            .catch((err: AxiosError) => {                \r\n                dispatch(fetchQuestionsFail(err))\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsStart = (): actionTypes.fetchQuestionsStart => {\r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_START,\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsSuccess = (data: IQuestion[]): actionTypes.fetchQuestionsSuccess => {    \r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_SUCCESS,\r\n        questions: data,\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsFail = (error: AxiosError): actionTypes.fetchQuestionsFail<AxiosError> => {\r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_FAIL,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const shuffleAnswers = (): actionTypes.shuffleAnswers => {\r\n    return {\r\n        type: actionTypes.SHUFFLE_ANSWERS,\r\n    }\r\n}\r\n\r\nexport const quizStarted = (): actionTypes.quizStarted => {\r\n    return {\r\n        type: actionTypes.QUIZ_STARTED,\r\n    }\r\n}\r\n\r\nexport const quizQuit = (): actionTypes.quizQuit  => {\r\n    return {\r\n        type: actionTypes.QUIZ_QUIT,      \r\n    }\r\n}\r\n\r\nexport const endQuiz = (): actionTypes.endQuiz => {\r\n    return {\r\n        type: actionTypes.QUIZ_ENDED,\r\n    }\r\n}\r\n\r\nexport const reset = (): actionTypes.resetQuiz => {\r\n    return {\r\n        type: actionTypes.RESET_QUIZ,\r\n    }\r\n}","import { Category } from \"../reducers/startPage\";\r\nimport { IQuestion } from \"../reducers/quiz\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const INIT = 'INIT';\r\n\r\nexport const FETCH_CATEGORIES_START = 'FETCH_CATEGORIES_START';\r\nexport const FETCH_CATEGORIES_SUCCESS = 'FETCH_CATEGORIES_SUCCESS';\r\nexport const FETCH_CATEGORIES_FAIL = 'FETCH_CATEGORIES_FAIL';\r\n\r\nexport const SET_QUESTION_AMOUNT = 'SET_QUESTION_AMOUNT';\r\nexport const SET_QUESTION_CATEGORY = 'SET_QUESTION_CATEGORY';\r\nexport const SET_QUESTION_TYPE = 'SET_QUESTION_TYPE';\r\nexport const SET_QUESTION_DIFFICULTY = 'SET_QUESTION_DIFFICULTY';\r\n\r\nexport const GENERATE_URL = 'GENERATE_URL';\r\n\r\nexport const RESET_START_PAGE = 'RESET_START_PAGE';\r\n\r\n// ----------------------------\r\n\r\nexport const QUIZ_STARTED = 'QUIZ_STARTED';\r\n\r\nexport const FETCH_QUESTIONS_START = 'FETCH_QUESTIONS_START';\r\nexport const FETCH_QUESTIONS_SUCCESS = 'FETCH_QUESTIONS_SUCCESS';\r\nexport const FETCH_QUESTIONS_FAIL = 'FETCH_QUESTIONS_FAIL';\r\n\r\nexport const SHUFFLE_ANSWERS = 'SHUFFLE_ANSWERS';\r\n\r\nexport const QUIZ_ENDED = 'QUIZ_ENDED';\r\nexport const QUIZ_QUIT = 'QUIZ_QUIT';\r\n\r\nexport const RESET_QUIZ = \"RESET_QUIZ\";\r\n\r\n// ----------------------------\r\n\r\nexport interface fetchQuestionsStart {\r\n    type: typeof FETCH_QUESTIONS_START,\r\n}\r\n\r\nexport interface fetchQuestionsSuccess {\r\n    type: typeof FETCH_QUESTIONS_SUCCESS,\r\n    questions: IQuestion[],\r\n}\r\n\r\nexport interface fetchQuestionsFail<T> {\r\n    type: typeof FETCH_QUESTIONS_FAIL,\r\n    error: T,\r\n}\r\n\r\nexport interface shuffleAnswers {\r\n    type: typeof SHUFFLE_ANSWERS,\r\n}\r\n\r\nexport interface quizStarted {\r\n    type: typeof QUIZ_STARTED,\r\n}\r\n\r\nexport interface endQuiz {\r\n    type: typeof QUIZ_ENDED,\r\n}\r\n\r\nexport interface quizQuit {\r\n    type: typeof QUIZ_QUIT,\r\n}\r\n\r\nexport interface resetQuiz {\r\n    type: typeof RESET_QUIZ,\r\n}\r\n\r\nexport type QuizActions = fetchQuestionsStart | fetchQuestionsSuccess | fetchQuestionsFail<any> | shuffleAnswers |\r\nquizStarted |  endQuiz | quizQuit | resetQuiz;\r\n\r\n// ----------------------------\r\n\r\nexport interface init extends Dispatch { }\r\n\r\nexport interface fetchCategoriesStart {\r\n    type: typeof FETCH_CATEGORIES_START,\r\n}\r\n\r\nexport interface fetchCategoriesSuccess {\r\n    type: typeof FETCH_CATEGORIES_SUCCESS,\r\n    categories: Category[],\r\n}\r\n\r\nexport interface fetchCategoriesFail<T> {\r\n    type: typeof FETCH_CATEGORIES_FAIL,\r\n    error: T,\r\n}\r\n\r\nexport interface setQuestionAmount {\r\n    type: typeof SET_QUESTION_AMOUNT,\r\n    value: string,\r\n}\r\n\r\nexport interface setQuestionCategory {\r\n    type: typeof SET_QUESTION_CATEGORY,\r\n    value: Category,\r\n}\r\n\r\nexport interface setQuestionType {\r\n    type: typeof SET_QUESTION_TYPE,\r\n    value: string,\r\n}\r\n\r\nexport interface setQuestionDifficulty {\r\n    type: typeof SET_QUESTION_DIFFICULTY,\r\n    value: string,\r\n}\r\n\r\nexport interface generateURL {\r\n    type: typeof GENERATE_URL,\r\n}\r\n\r\nexport interface resetStartPage {\r\n    type: typeof RESET_START_PAGE,\r\n}\r\n\r\nexport type StartPageActions = fetchCategoriesStart | fetchCategoriesSuccess | fetchCategoriesFail<any> |\r\n    setQuestionAmount | setQuestionCategory | setQuestionType | setQuestionDifficulty | generateURL | resetStartPage;\r\n\r\n\r\nexport type AllActions = QuizActions | StartPageActions;","import { Category } from '../reducers/startPage';\r\nimport * as actionTypes from './actionTypes';\r\nimport axios, { AxiosResponse, AxiosError } from 'axios';\r\nimport { Dispatch } from 'redux';\r\n\r\ninterface CategoriesServerData {\r\n    trivia_categories: Category[];\r\n}\r\n\r\nexport const init = () => {\r\n    return (dispatch: Dispatch<actionTypes.StartPageActions>) => {\r\n        dispatch(fetchCategoriesStart());\r\n        axios.get('https://opentdb.com/api_category.php')\r\n            .then((response: AxiosResponse<CategoriesServerData>) => {\r\n                dispatch(fetchCategoriesSuccess(response.data.trivia_categories))\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(fetchCategoriesFail(err))\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesStart = (): actionTypes.fetchCategoriesStart => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_START,\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesSuccess = (trivia_categories: Category[]): actionTypes.fetchCategoriesSuccess => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_SUCCESS,\r\n        categories: trivia_categories,\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesFail = (error: AxiosError): actionTypes.fetchCategoriesFail<AxiosError> => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_FAIL,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const setQuestionAmount = (value: string): actionTypes.setQuestionAmount => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_AMOUNT,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const setQuestionCategory = (value: Category): actionTypes.setQuestionCategory => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_CATEGORY,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const setQuestionDifficulty = (value: string): actionTypes.setQuestionDifficulty => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_DIFFICULTY,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const setQuestionType = (value: string): actionTypes.setQuestionType => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_TYPE,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const generateURL = (): actionTypes.generateURL => {\r\n    return {\r\n        type: actionTypes.GENERATE_URL,\r\n    }\r\n}\r\n\r\nexport const reset = (): actionTypes.resetStartPage => {\r\n    return {\r\n        type: actionTypes.RESET_START_PAGE,\r\n    }\r\n}","import styled, { keyframes } from \"styled-components\";\r\nimport { PRIMARY_THEME } from \"~/utils/colors\";\r\n\r\nconst lds_dual_ring = keyframes`\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n  display: flex;\r\n  width: 64px;\r\n  height: 64px;\r\n  margin: 36px auto;\r\n  \r\n  :after {\r\n    content: \" \";\r\n    display: block;\r\n    width: 46px;\r\n    height: 46px;\r\n    margin: 1px;\r\n    border-radius: 50%;\r\n    border: 5px solid #125271;\r\n    border-color: ${PRIMARY_THEME.BASE} transparent ${PRIMARY_THEME.BASE} transparent;\r\n    animation: ${lds_dual_ring} 1.2s linear infinite;\r\n  }\r\n`;","import React from 'react';\r\nimport * as styled from './styles'\r\n\r\nconst Spinner = () => <styled.Spinner/>\r\n\r\nexport default Spinner;","import styled from 'styled-components';\r\n\r\nexport const SettingPanel = styled.div`\r\n    width: 100%;\r\n    max-width: 900px;\r\n    margin: 20px 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const ButtonInput = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 5px 0px;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    text-align: end;\r\n    flex: 1;\r\n    font-size: 1.5rem;\r\n    padding: 0 20px;\r\n    border-right: 1px solid #D3D3D3;\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex: 4;\r\n    flex-wrap: wrap;\r\n`;","import styled from 'styled-components';\r\nimport { GRAY, PRIMARY_THEME } from \"~/utils/colors\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\ninterface ISelectable {\r\n    selected: boolean,\r\n}\r\n\r\nexport const Tile = styled.div<ISelectable>`\r\n    width: 82px;\r\n    height: 82px;\r\n    border-width: ${props => props.selected ? '2px' : '1px'};\r\n    border-style: solid;\r\n    border-color: ${props => props.selected ? PRIMARY_THEME.BASE : GRAY.BASE};\r\n    border-radius: 6px;\r\n    margin: 5px;\r\n    font-size: '1rem';\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    cursor: pointer;\r\n    :hover {\r\n        box-shadow: 0px 0px 4px 0px #ababab;\r\n    }\r\n    color: ${props => props.selected ? PRIMARY_THEME.BASE : GRAY.BASE};\r\n    \r\n`;\r\n\r\nexport const Label = styled.div`\r\n    white-space: nowrap;\r\n`;\r\n\r\nexport const Icon = styled(FontAwesomeIcon)<ISelectable>`\r\n    color: inherit;\r\n    font-size: 2rem;\r\n    :hover {\r\n        color: inherit;\r\n    }\r\n    \r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { faQuestion } from '@fortawesome/free-solid-svg-icons';\r\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types';\r\n\r\ninterface ITile {\r\n    header: string,\r\n    selected: boolean,\r\n    onClick: () => void,\r\n    icon?: IconDefinition,\r\n}\r\n\r\nconst Tile: React.FC<ITile> = (props) => {\r\n    return (\r\n        <styled.Tile selected={props.selected} onClick={props.onClick}>\r\n            <styled.Icon selected={props.selected} icon={props.icon || faQuestion} />\r\n            <styled.Label>{props.header}</styled.Label>\r\n        </styled.Tile>\r\n    );\r\n}\r\n\r\nexport default Tile;","import { faQuestion, faList, faCheckSquare, faBaby, faCrown, faGraduationCap } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst icons = {\r\n    \"Any\": faQuestion,\r\n    \"ABCD\": faList, \"True/False\": faCheckSquare,\r\n    \"Easy\": faBaby, \"Medium\": faGraduationCap, \"Hard\": faCrown,\r\n}\r\n\r\nexport const getIcon = (option: string) => {\r\n    return icons[option] || faQuestion;\r\n}","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Tile from \"~/components/UI/Tile\";\r\nimport { IInput } from '../';\r\nimport { getIcon } from './config';\r\n\r\nconst ButtonInput: React.FC<IInput<string>> = ({ label, options, selected, onChange }) => {\r\n    return (\r\n        <styled.ButtonInput>\r\n            <styled.Label>{label}</styled.Label>\r\n            <styled.ButtonsContainer>\r\n                {options.map((option,i) => (\r\n                    <Tile key={i} icon={getIcon(option)} header={option} selected={option === selected} onClick={() => onChange(option)} />\r\n                ))}\r\n            </styled.ButtonsContainer>\r\n        </styled.ButtonInput>\r\n    )\r\n}\r\n\r\nexport default ButtonInput;","import styled from 'styled-components';\r\nimport ReactSelect from 'react-select';\r\nimport { PRIMARY_THEME, GRAY } from '~/utils/colors';\r\n\r\nexport const CategoryInput = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 10px 0px;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    text-align: end;\r\n    flex: 1;\r\n    font-size: 1.5rem;\r\n    padding: 0 20px;\r\n    border-right: 1px solid ${GRAY.BASE};\r\n`;\r\n\r\nexport const SelectContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex: 4;\r\n`;\r\n\r\nexport const Select = styled(ReactSelect)`\r\n    &.reactSelect {\r\n        width: 100%;\r\n        max-width: 400px;\r\n        color: ${PRIMARY_THEME.BASE};\r\n        & .rSelect__control {\r\n            cursor: pointer;\r\n        }\r\n        & .rSelect__control--is-focused {\r\n            border: 1px solid lightgray;\r\n            box-shadow: none;\r\n        }\r\n        & .rSelect__option--is-focused {\r\n            background: lightgray;\r\n        }\r\n        & .rSelect__option--is-selected {\r\n            background: ${PRIMARY_THEME.BASE};\r\n        }\r\n        & .rSelect__single-value {\r\n            color: inherit;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { Category } from \"~/store/reducers/startPage\";\r\nimport { IInput } from '../';\r\nimport { ValueType } from \"react-select\";\r\n\r\ntype OptionType = { label: string; value: number };\r\n\r\nconst CategoryInput: React.FC<IInput<Category>> = (props) => {\r\n    const optionsFormatted = props.options.map( category => ({value: category.id, label: category.name}));\r\n    const value = optionsFormatted.filter( category => category.value === props.selected.id).pop();\r\n    const handleChange = (newCategory: ValueType<OptionType>) => {\r\n        const id = (newCategory as OptionType).value;\r\n        const name = (newCategory as OptionType).label;\r\n        props.onChange({id, name});\r\n    }\r\n    \r\n    return (\r\n        <styled.CategoryInput>\r\n            <styled.Label>{props.label}</styled.Label>\r\n            <styled.SelectContainer>\r\n                <styled.Select classNamePrefix=\"rSelect\" className=\"reactSelect\" value={value} options={optionsFormatted} onChange={handleChange}/>\r\n            </styled.SelectContainer>\r\n        </styled.CategoryInput>\r\n    )\r\n}\r\n\r\nexport default CategoryInput;","import styled from 'styled-components';\r\nimport { GRAY } from '~/utils/colors';\r\n\r\nexport const SliderInput = styled.div`\r\n    display: flex;\r\n    margin: 10px 0px;\r\n`;\r\n\r\nexport const ValueLabel = styled.div`\r\n    font-size: 1.5rem;\r\n    flex: 1;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    width: 100%;\r\n    flex: 1;\r\n    text-align: end;\r\n    font-size: 1.5rem;\r\n    padding: 0 20px;\r\n    border-right: 1px solid ${GRAY.BASE};\r\n`;\r\n\r\nexport const SliderContainer = styled.div`\r\n    width: 100%;\r\n    flex: 4;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const Slider = styled.div`\r\n    flex: 3;\r\n    padding-right: 50px;\r\n`;","import styled from 'styled-components';\r\nimport { PRIMARY_THEME } from '~/utils/colors';\r\n\r\ninterface ISlider {\r\n    min: number,\r\n    max: number,\r\n}\r\n\r\nexport const Slider = styled.input.attrs<ISlider>(props => {\r\n    return {\r\n    type: \"range\",\r\n    min: props.min,\r\n    max: props.max,\r\n    step: 5,\r\n    }\r\n})`\r\n    -webkit-appearance: none;\r\n    width: 100%;\r\n    height: 8px;\r\n    background: lightgrey;\r\n    outline: none;\r\n    border-radius: 16px;\r\n    cursor: pointer;\r\n\r\n    ::-webkit-slider-thumb {\r\n        -webkit-appearance: none;\r\n        appearance: none;\r\n        width: 20px;\r\n        height: 20px;\r\n        background: ${PRIMARY_THEME.BASE};\r\n        border-radius: 50%;\r\n    }\r\n`;","enum KEYS {\r\n    ENTER = 'Enter',\r\n    ESCAPE = 'Escape',\r\n    ARROW_UP = 'ArrowUp',\r\n    ARROW_DOWN = 'ArrowDown',\r\n    ARROW_RIGHT = 'ArrowRight',\r\n    ARROW_LEFT = 'ArrowLeft',\r\n    ONE = '1',\r\n    TWO = '2',\r\n    THREE = '3',\r\n    FOUR = '4',\r\n}\r\n\r\nexport default KEYS;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface ISlider {\r\n    value: string,\r\n    min: number,\r\n    max: number,\r\n    onChange: (value: string) => void,\r\n}\r\n\r\nconst Slider: React.FC<ISlider> = (props) => {\r\n    const handleSliderChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        props.onChange(e.target.value);\r\n    }\r\n    return (\r\n        <styled.Slider min={props.min} max={props.max} value={props.value} onChange={handleSliderChange}/>\r\n    );\r\n}\r\n\r\nexport default Slider;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Slider from '~/components/UI/Slider';\r\nimport { IInput } from '../';\r\n\r\nconst SliderInput: React.FC<IInput<string>> = ({label, selected, options, onChange}) => {\r\n    return (\r\n        <styled.SliderInput>\r\n            <styled.Label>{label}</styled.Label>\r\n            <styled.SliderContainer>\r\n                <styled.ValueLabel>{selected}</styled.ValueLabel>\r\n                <styled.Slider>\r\n                    <Slider value={selected} min={+options[0]} max={+options[1]} onChange={onChange} />\r\n                </styled.Slider>\r\n            </styled.SliderContainer>\r\n        </styled.SliderInput>\r\n    )\r\n};\r\n\r\nexport default SliderInput;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { ISetting, Category } from \"~/store/reducers/startPage\";\r\nimport { CategoryInput, SliderInput, ButtonInput } from './Inputs';\r\n\r\ninterface ISettingPanel {\r\n    amount: ISetting<string>,\r\n    category: ISetting<Category>,\r\n    difficulty: ISetting<string>,\r\n    type: ISetting<string>,\r\n    onAmountChange: (newAmount: string) => void,\r\n    onCategoryChange: (newAmount: Category) => void,\r\n    onTypeChange: (newAmount: string) => void,\r\n    onDifficultyChange: (newAmount: string) => void,\r\n}\r\n\r\nconst SettingPanel: React.FC<ISettingPanel> = (props) => {\r\n    const {amount, category, difficulty, type} = props;\r\n    const {onAmountChange, onCategoryChange, onDifficultyChange, onTypeChange } = props;\r\n\r\n    return (\r\n        <styled.SettingPanel>\r\n            <SliderInput label=\"Quantity\" options={[\"5\",\"30\"]} selected={amount.selected} onChange={onAmountChange} />\r\n            <CategoryInput label=\"Category\" options={category.values} selected={category.selected} onChange={onCategoryChange} />\r\n            <ButtonInput label=\"Type\" options={type.values} selected={type.selected} onChange={onTypeChange} />\r\n            <ButtonInput label=\"Difficulty\" options={difficulty.values} selected={difficulty.selected} onChange={onDifficultyChange} />\r\n        </styled.SettingPanel>\r\n    )\r\n}\r\n\r\nexport default SettingPanel;","import styled from \"styled-components\";\r\nimport { PRIMARY_THEME } from \"~/utils/colors\";\r\n\r\ninterface IButtonStyle {\r\n    size: number,\r\n    uppercase?: boolean,\r\n    bold?: boolean,\r\n}\r\n\r\nexport const Button = styled.div<IButtonStyle>`\r\n    color: white;\r\n    text-decoration: none;\r\n    text-transform: ${props => props.uppercase ? 'uppercase' : 'none'};\r\n    cursor: pointer;\r\n    background: ${PRIMARY_THEME.BASE};\r\n    padding: 15px 25px;\r\n    font-size: ${props => props.size}rem;\r\n    font-weight: ${props => props.bold ? 'bold' : 'normal' };\r\n    margin: 2rem;\r\n    margin-bottom: 90px;\r\n    :hover {\r\n        background: ${PRIMARY_THEME.DARK};\r\n    }\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface IButtonProps {\r\n    label: string,\r\n    size?: number,\r\n    uppercase?: boolean,\r\n    bold?: boolean,\r\n    onClick: () => void,\r\n}\r\n\r\nconst Button: React.FC<IButtonProps> = ({label, onClick, size=1.25, uppercase, bold}) => {\r\n    return (\r\n        <styled.Button\r\n            bold={bold}\r\n            uppercase={uppercase}\r\n            size={size}\r\n            children={label}\r\n            onClick={onClick} />\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { useEffect, useRef } from 'react';\r\nimport * as styled from './styles';\r\nimport { connect } from 'react-redux';\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport * as actions from '../../store/actions/index';\r\nimport { StartPageActions } from '../../store/actions/actionTypes';\r\nimport { ISettings, Category } from \"~/store/reducers/startPage\";\r\nimport Spinner from '~/components/UI/Spinner';\r\nimport { AppState } from \"~/index\";\r\nimport SettingPanel from '~/components/SettingPanel';\r\nimport KEYS from \"~/utils/keys\";\r\nimport Button from \"~/components/UI/Button\";\r\n\r\ninterface IStateProps {\r\n    settings: ISettings,\r\n    loading: boolean,\r\n    apiURL: string,\r\n    dataAvailable: boolean,\r\n}\r\n\r\ninterface IDispatchProps {\r\n    init: () => void,\r\n    generateURL: () => void,\r\n    initQuiz: () => void,\r\n    setQuestionAmount: (value: string) => void,\r\n    setQuestionCategory: (value: Category) => void,\r\n    setQuestionType: (value: string) => void,\r\n    setQuestionDifficulty: (value: string) => void,\r\n}\r\n\r\nconst StartPage: React.FC<IStateProps & IDispatchProps> = (props) => {\r\n    const { init, settings, loading, generateURL, initQuiz, dataAvailable } = props;\r\n    const { setQuestionAmount, setQuestionCategory, setQuestionType, setQuestionDifficulty } = props;\r\n    const {amount, category, difficulty, type } = settings;\r\n    const startPageRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        !dataAvailable && init();\r\n    }, [init, dataAvailable]);\r\n\r\n    useEffect(() => {\r\n        if (startPageRef?.current) {\r\n            startPageRef.current!.focus();\r\n        }\r\n    }, [startPageRef]);\r\n\r\n    const handleStartButtonClick = () => {\r\n        generateURL();\r\n        initQuiz();\r\n    }\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        console.log('e.key ',e.key );\r\n        if(e.key === KEYS.ENTER) {\r\n            console.log('should start');\r\n            handleStartButtonClick();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <styled.StartPage tabIndex={0} onKeyDown={handleKeyDown} ref={startPageRef}>\r\n            <styled.Menu>\r\n                <styled.Title>Quizer</styled.Title>\r\n                <styled.SubTitle>\r\n                    <p>Quiz generator with use of Trivia API opentdb.com</p>\r\n                    <p>created by Jacek Smetek</p>\r\n                </styled.SubTitle>\r\n                {loading ? <styled.Spinner><Spinner/></styled.Spinner>\r\n                    : <SettingPanel \r\n                        amount={amount}\r\n                        onAmountChange={setQuestionAmount}\r\n                        category={category}\r\n                        onCategoryChange={setQuestionCategory}\r\n                        difficulty={difficulty}\r\n                        onDifficultyChange={setQuestionDifficulty}\r\n                        type={type}\r\n                        onTypeChange={setQuestionType} /> }\r\n            </styled.Menu>\r\n            {!loading && <Button uppercase bold size={2} label={'Start'} onClick={handleStartButtonClick}/>}\r\n        </styled.StartPage>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ startPage }: AppState): IStateProps => {\r\n    return {\r\n        settings: startPage.settings,\r\n        loading: startPage.loading,\r\n        apiURL: startPage.settings.apiURL,\r\n        dataAvailable: startPage.dataFetched,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState,null,StartPageActions>): IDispatchProps => {\r\n    return {\r\n        init: () => dispatch(actions.init()),\r\n        generateURL: () => dispatch(actions.generateURL()),\r\n        initQuiz: () => dispatch(actions.initQuiz()),\r\n        setQuestionAmount: (newAmount) => dispatch(actions.setQuestionAmount(newAmount)),\r\n        setQuestionCategory: (newCategory) => dispatch(actions.setQuestionCategory(newCategory)),\r\n        setQuestionType: (newType) => dispatch(actions.setQuestionType(newType)),\r\n        setQuestionDifficulty: (newDifficulty) => dispatch(actions.setQuestionDifficulty(newDifficulty)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StartPage);","import styled from \"styled-components\";\r\n\r\ninterface IQuizStyle {\r\n    finished: boolean, \r\n    ref: React.MutableRefObject<HTMLDivElement | null>,\r\n}\r\n\r\nexport const Quiz = styled.div<IQuizStyle>`\r\n    align-self: center;\r\n    width: 80%;\r\n    max-width: 700px;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: ${props => props.finished ? 'start' : 'center'};\r\n    align-items: center;\r\n    flex-direction: column;\r\n    :focus {\r\n        outline: none;\r\n    }\r\n`;","import styled from \"styled-components\";\r\nimport { PRIMARY_THEME } from \"~/utils/colors\";\r\n\r\nexport const QuestionComponent = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n    color: ${PRIMARY_THEME.BASE};\r\n`;\r\n\r\nexport const QuestionHeader = styled.div`\r\n   display: flex;\r\n`;\r\n\r\nexport const Question = styled.h3`\r\n    display: flex;\r\n    margin: 15px 0;\r\n`;\r\n\r\nexport const CategoryLabel = styled.p` \r\n    font-style: italic;\r\n    display: flex;\r\n`;\r\n\r\nexport const AnswersContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;","import styled from 'styled-components';\r\nimport { CORRECT, WRONG, GRAY, PRIMARY_THEME } from '~/utils/colors';\r\n\r\ninterface IAnswerProps {\r\n    isSelected: boolean,\r\n    showAnswer: boolean,\r\n    isCorrect: boolean,\r\n}\r\n\r\nenum StyleState { CorrectSelected, IncorrectSelected, Selected, CorrectNotSelected, Notselected }\r\n\r\nconst getState = (props: IAnswerProps): StyleState => {\r\n    const { isSelected, showAnswer, isCorrect} = props;\r\n    return isSelected \r\n        ? showAnswer\r\n            ? isCorrect \r\n                ? StyleState.CorrectSelected \r\n                : StyleState.IncorrectSelected\r\n            : StyleState.Selected\r\n        : showAnswer && isCorrect \r\n            ? StyleState.CorrectNotSelected\r\n            : StyleState.Notselected\r\n};\r\n\r\nconst answerBackgroundColor = {\r\n    [StyleState.CorrectSelected]: CORRECT.LIGHT,\r\n    [StyleState.IncorrectSelected]: WRONG.LIGHT,\r\n    [StyleState.Selected]: 'transparent',\r\n    [StyleState.CorrectNotSelected]: CORRECT.LIGHT,\r\n    [StyleState.Notselected]: 'transparent',\r\n}\r\n\r\nconst answerBorderColor = {\r\n    [StyleState.CorrectSelected]: CORRECT.BASE,\r\n    [StyleState.IncorrectSelected]: WRONG.BASE,\r\n    [StyleState.Selected]: GRAY.BASE,\r\n    [StyleState.CorrectNotSelected]: GRAY.BASE,\r\n    [StyleState.Notselected]: GRAY.BASE,\r\n}\r\n\r\nexport const Answer = styled.div<IAnswerProps>`\r\n    display: flex;\r\n    width: 100%;\r\n    padding: 15px 0;\r\n    cursor: pointer;\r\n    background-color: ${props => answerBackgroundColor[getState(props)]};\r\n    :hover {\r\n        background: ${GRAY.LIGHT};\r\n    }\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: ${props => answerBorderColor[getState(props)]};\r\n    margin: 5px 0;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst checkboxBorderColor = {\r\n    [StyleState.CorrectSelected]: CORRECT.BASE,\r\n    [StyleState.IncorrectSelected]: WRONG.BASE,\r\n    [StyleState.Selected]: PRIMARY_THEME.BASE,\r\n    [StyleState.CorrectNotSelected]: CORRECT.BASE,\r\n    [StyleState.Notselected]: GRAY.BASE,\r\n}\r\n\r\nconst checkboxBorderWidth = {\r\n    [StyleState.CorrectSelected]: '10px',\r\n    [StyleState.IncorrectSelected]: '6px',\r\n    [StyleState.Selected]: '6px',\r\n    [StyleState.CorrectNotSelected]: '10px',\r\n    [StyleState.Notselected]: '1px',\r\n}\r\n\r\nexport const Checkbox = styled.div<IAnswerProps>`\r\n    width: 20px;\r\n    height: 20px;\r\n    border-width: ${props => checkboxBorderWidth[getState(props)]};\r\n    border-style: solid;\r\n    border-color: ${props => checkboxBorderColor[getState(props)]};\r\n    margin: 0 10px;\r\n    border-radius: 50%;\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface IAnswerProps {\r\n    answer: string,\r\n    isSelected: boolean,\r\n    isCorrect: boolean,\r\n    reveal: boolean,\r\n    onClick: () => void,\r\n}\r\n\r\nconst Answer: React.FC<IAnswerProps> = ({isSelected, onClick, answer, isCorrect, reveal}) => \r\n    <styled.Answer \r\n        isSelected={isSelected}\r\n        isCorrect={isCorrect}\r\n        showAnswer={reveal}\r\n        onClick={!reveal ? onClick : undefined} >\r\n        <styled.Checkbox showAnswer={reveal} isCorrect={isCorrect} isSelected={isSelected} />\r\n        {answer} \r\n    </styled.Answer>\r\n\r\nexport default Answer;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Answer from './Answer';\r\nimport { IQuestion } from \"~/store/reducers/quiz\";\r\nimport unescape from '@favware/unescape';\r\n\r\ninterface QuestionProps {\r\n    question: IQuestion,\r\n    answers: string[],\r\n    correctId: number,\r\n    reveal: boolean,\r\n    selectedId?: number,\r\n    onAnswerPicked: (answerId: number) => void,\r\n}\r\n\r\nconst Question: React.FunctionComponent<QuestionProps> = ({ question, answers, correctId, reveal, onAnswerPicked, selectedId }) => {\r\n    const categoryLabel = `Category: ${question.category}`;\r\n\r\n    return (\r\n        <styled.QuestionComponent>\r\n            <styled.CategoryLabel>{categoryLabel}</styled.CategoryLabel>\r\n            <styled.Question>{unescape(question.question)}</styled.Question>\r\n            <styled.AnswersContainer>\r\n                {answers.map((answer, i) => (\r\n                    <Answer\r\n                        key={i}\r\n                        answer={unescape(answer)}\r\n                        isSelected={(!selectedId && reveal) || selectedId === i}\r\n                        isCorrect={correctId === i}\r\n                        reveal={reveal}\r\n                        onClick={() => onAnswerPicked(i)} />\r\n                ))}\r\n            </styled.AnswersContainer>\r\n        </styled.QuestionComponent>\r\n    );\r\n};\r\n\r\nexport default Question;","import styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { PRIMARY_THEME } from \"~/utils/colors\";\r\n\r\nexport const NavBar = styled.div`\r\n    color: ${PRIMARY_THEME.BASE};\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: fixed;\r\n    text-align: left;\r\n    background: #F2F2F2;\r\n    width: 100%;\r\n    bottom: 0;\r\n    padding: 0 15px;\r\n`;\r\n\r\nexport const Icon = styled(FontAwesomeIcon)`\r\n    font-size: 2rem;\r\n    margin: 15px;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const QuestionCounter = styled.div`\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n`;","import React from 'react'\r\nimport * as styled from './styles'\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface INavBarProps {\r\n    currentQuestionNumber: number,\r\n    questionsAmount: number,\r\n    loading: boolean,\r\n    finished: boolean,\r\n    onQuit: () => void,\r\n};\r\n\r\nconst NavBar: React.FC<INavBarProps> = ({ currentQuestionNumber, questionsAmount, loading, finished, onQuit }) => {\r\n    const counterLabel = finished ? null : loading ? 'Loading...' : `Question ${currentQuestionNumber} of ${questionsAmount}`\r\n    return (\r\n        <styled.NavBar>\r\n            <styled.QuestionCounter>{counterLabel}</styled.QuestionCounter>\r\n            <styled.ButtonContainer>\r\n                <styled.Icon onClick={onQuit} icon={faHome}/>\r\n            </styled.ButtonContainer>\r\n        </styled.NavBar>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import styled from 'styled-components';\r\nimport { PRIMARY_THEME, CORRECT, WRONG } from '~/utils/colors';\r\n\r\ninterface IAnswerContainerStyle {\r\n    isCorrect: boolean,\r\n}\r\n\r\nexport const Summary = styled.div`\r\n    color: ${PRIMARY_THEME.BASE};\r\n`;\r\n\r\nexport const ScoreContainer = styled.div`\r\n    padding: 50px 0;\r\n    font-size: 3rem;\r\n    font-weight: 500;\r\n`;\r\n\r\nexport const AnswerContainer = styled.div<IAnswerContainerStyle>`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 15px 0;\r\n    margin: 5px;\r\n    background-color: ${({isCorrect}) => isCorrect ? CORRECT.LIGHT : WRONG.LIGHT};\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: ${({isCorrect}) => isCorrect ? CORRECT.BASE : WRONG.BASE };\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport const Question = styled.div`\r\n    text-align: left;\r\n    width: 80%;\r\n    padding: 0 15px;\r\n`;\r\n\r\nexport const CorrectAnswer = styled.div`\r\n    width: 20%;\r\n    text-align: left;\r\n    border-left: 1px solid lightgray;\r\n    display: flex;\r\n    padding: 0 15px;\r\n    align-items: center;\r\n    overflow: hidden;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const Score = styled.div`\r\n    padding: 40px 0;\r\n    font-weight: 500;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    font-size: 4rem;\r\n`;\r\n\r\nexport const StarsContainer = styled.div`\r\n    font-size: 2rem;\r\n    display: flex;\r\n    justify-content: center;\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStar as fasStar } from '@fortawesome/free-solid-svg-icons';\r\nimport { faStar as farStar } from '@fortawesome/free-regular-svg-icons';\r\n\r\ninterface IScore {\r\n    score: number,\r\n}\r\n\r\nconst Score: React.FC<IScore> = ({ score }) => {\r\n    const numOfFullStars = Math.round(score / 20) === 5 && score !== 100 ? 4 : Math.round(score / 20);\r\n    const numOfEmptyStars = 5 - numOfFullStars;\r\n\r\n    return (\r\n        <styled.Score>\r\n            <styled.Label>{score}%</styled.Label>\r\n            <styled.StarsContainer>\r\n                {[...Array(numOfFullStars)].map(star => <FontAwesomeIcon icon={fasStar} />)}\r\n                {[...Array(numOfEmptyStars)].map(star => <FontAwesomeIcon icon={farStar} />)}\r\n            </styled.StarsContainer>\r\n        </styled.Score>\r\n    );\r\n};\r\n\r\nexport default Score;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Score from '~/components/UI/Score';\r\nimport { IQuestion } from \"~/store/reducers/quiz\";\r\n\r\ninterface ISummary {\r\n    questions: IQuestion[],\r\n    correctAnswers: boolean[],\r\n    score: number,\r\n}\r\n\r\nconst Summary: React.FC<ISummary> = ({ questions, correctAnswers, score }) => {\r\n    return (\r\n        <styled.Summary>\r\n            <Score score={score}/>\r\n            {questions.map((question, questionId) =>\r\n            <styled.AnswerContainer key={questionId} isCorrect={correctAnswers[questionId]}>\r\n                <styled.Question>\r\n                    {question.question}\r\n                </styled.Question>\r\n                <styled.CorrectAnswer>\r\n                    {question.correct_answer}\r\n                </styled.CorrectAnswer>\r\n            </styled.AnswerContainer>\r\n            )}\r\n        </styled.Summary>\r\n    )\r\n};\r\n\r\nexport default Summary;","import React, { useState, useRef, useEffect } from 'react';\r\nimport * as styled from './styles';\r\nimport Question from '../../components/Question';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport * as actions from '../../store/actions/index';\r\nimport { QuizActions } from '../../store/actions/actionTypes';\r\nimport Spinner from '../../components/UI/Spinner';\r\nimport NavBar from \"~/components/NavBar\";\r\nimport Button from '../../components/UI/Button';\r\nimport { AppState } from '../../index';\r\nimport Summary from \"~/components/Summary\";\r\nimport { IQuestion } from \"~/store/reducers/quiz\";\r\nimport KEYS from \"~/utils/keys\";\r\n\r\ninterface StateProps {\r\n    questions: IQuestion[],\r\n    quizStarted: boolean,\r\n    dataLoading: boolean,\r\n    isDataAvailable: boolean,\r\n}\r\n\r\ninterface DispatchProps {\r\n    end: () => void,\r\n    initQuiz: () => void,\r\n    quit: () => void,\r\n}\r\n\r\nconst Quiz: React.FC<StateProps & DispatchProps> = props => {\r\n    const [finished, setFinished] = useState(false);\r\n    const [questionNumber, setQuestionNumber] = useState(1);\r\n    const [correctAnswers, setCorrectAnswers] = useState<boolean[]>([]);\r\n    const questionId = questionNumber - 1;\r\n    const [selectedId, setSelectedId] = useState<number>();\r\n    const question = props.questions[questionId];\r\n    const quizRef = useRef<HTMLDivElement>(null);\r\n\r\n    let answers: string[] = [];\r\n    const questionsAmount = props.questions.length;\r\n    const correctAnswerId = question?.correctAnswerId;\r\n    const score = correctAnswers.reduce((prev, curr) => curr ? prev + 1 : prev, 0) / questionsAmount * 100;\r\n\r\n    const [inRevealMode, setInRevealMode] = useState(false);\r\n    const buttonLabel = finished ? 'Try Again!' : inRevealMode ? \"Next\" : \"Check\";\r\n    const loading = !(props.quizStarted || finished) || props.dataLoading;\r\n\r\n    useEffect(() => {\r\n        if (quizRef?.current) {\r\n            quizRef.current!.focus();\r\n        }\r\n    }, [quizRef]);\r\n\r\n    if (!props.isDataAvailable) {\r\n        return <Redirect to=\"/\" />\r\n    };\r\n\r\n    if (question) {\r\n        answers = [...question.incorrect_answers];\r\n        answers.splice(correctAnswerId, 0, question.correct_answer);\r\n    }\r\n\r\n    const resetSettings = () => {\r\n        setQuestionNumber(1);\r\n        setCorrectAnswers([]);\r\n        setFinished(false);\r\n        setInRevealMode(false)\r\n        props.initQuiz();\r\n    }\r\n\r\n    const handleButtonClick = () => {\r\n        if (finished) {\r\n            resetSettings();\r\n        } else if (inRevealMode) {\r\n            const isLastQuestion = questionNumber === props.questions.length;\r\n            setSelectedId(undefined);\r\n            setFinished(isLastQuestion);\r\n            setQuestionNumber(isLastQuestion ? questionNumber : questionNumber + 1);\r\n            setInRevealMode(false);\r\n        } else {\r\n            const isCorrect = selectedId === correctAnswerId\r\n            setCorrectAnswers([...correctAnswers, isCorrect])\r\n            setInRevealMode(true);\r\n        };\r\n    }\r\n\r\n    const handleAnswerPicked = (selectedAnswerId: number) => {\r\n        setSelectedId(selectedAnswerId);\r\n    }\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        const isBooleanQuestion = answers.length <= 2;\r\n        console.log(e.key);\r\n        \r\n        if (!loading) {\r\n            switch (e.key) {\r\n                case KEYS.ENTER:\r\n                    handleButtonClick();\r\n                    break;\r\n                case KEYS.ESCAPE:\r\n                    props.quit();\r\n                    break;\r\n                case KEYS.ARROW_UP:\r\n                    if (!inRevealMode && selectedId != null && selectedId > 0) {\r\n                        setSelectedId(selectedId - 1);\r\n                        break;\r\n                    }\r\n                    !inRevealMode &&setSelectedId(isBooleanQuestion ? 1 : 3);\r\n                    break;\r\n                case KEYS.ARROW_DOWN:\r\n                    if (!inRevealMode &&selectedId != null && (isBooleanQuestion ? selectedId < 1 : selectedId < 3)) {\r\n                        setSelectedId(selectedId + 1);\r\n                        break;\r\n                    }\r\n                    !inRevealMode && setSelectedId(0);\r\n                    break;\r\n                case KEYS.ONE:\r\n                    !inRevealMode && setSelectedId(0);\r\n                    break;\r\n                case KEYS.TWO:\r\n                    !inRevealMode && setSelectedId(1);\r\n                    break;\r\n                case KEYS.THREE:\r\n                    !isBooleanQuestion && !inRevealMode && setSelectedId(2);\r\n                    break;\r\n                case KEYS.FOUR:\r\n                    !isBooleanQuestion && !inRevealMode && setSelectedId(3);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n    const getContent = () => {\r\n        if (loading) {\r\n            return <Spinner />\r\n        } else if (finished) {\r\n            return <Summary score={score} questions={props.questions} correctAnswers={correctAnswers} />\r\n        }\r\n        return <Question\r\n            question={props.questions[questionId]}\r\n            reveal={inRevealMode}\r\n            answers={answers}\r\n            correctId={correctAnswerId}\r\n            onAnswerPicked={handleAnswerPicked}\r\n            selectedId={selectedId} />\r\n    }\r\n\r\n    return (\r\n        <styled.Quiz finished={finished} tabIndex={0} onKeyDown={handleKeyDown} ref={quizRef}>\r\n            {getContent()}\r\n            <Button label={buttonLabel} onClick={handleButtonClick} />\r\n            <NavBar\r\n                currentQuestionNumber={questionNumber}\r\n                questionsAmount={questionsAmount}\r\n                loading={props.dataLoading}\r\n                onQuit={props.quit}\r\n                finished={finished} />\r\n        </styled.Quiz>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ quiz, startPage }: AppState): StateProps => {\r\n    return {\r\n        questions: quiz.questions,\r\n        quizStarted: quiz.started,\r\n        dataLoading: quiz.fetching,\r\n        isDataAvailable: startPage.dataFetched,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, null, QuizActions>): DispatchProps => {\r\n    return {\r\n        end: () => dispatch(actions.endQuiz()),\r\n        initQuiz: () => dispatch(actions.initQuiz()),\r\n        quit: () => dispatch(actions.quizQuit()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import React from 'react';\nimport * as styled from './styles';\nimport { connect } from 'react-redux';\nimport Menu from './containers/Menu';\nimport Quiz from './containers/Quiz';\nimport { AppState } from \"./\";\n\ninterface StateProps {\n  quizStarted: boolean,\n  dataLoading: boolean,\n}\n\nconst App: React.FC<StateProps> = ({ quizStarted, dataLoading }) =>\n  <styled.App>\n    {quizStarted || dataLoading ? <Quiz /> : <Menu />}\n  </styled.App>\n\nconst mapStateToProps = ({quiz}: AppState): StateProps => {\n  return {\n    quizStarted: quiz.started,\n    dataLoading: quiz.fetching,\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nexport interface IQuestion {\r\n    category: string,\r\n    type: (\"multiple\" | \"boolean\"),\r\n    difficulty: (\"easy\" | \"medium\" | \"hard\"),\r\n    question: string,\r\n    correct_answer: string,\r\n    incorrect_answers: string[],\r\n    correctAnswerId: number,\r\n}\r\n\r\nexport interface QuizState {\r\n    started: boolean,\r\n    fetching: boolean,\r\n    questions: IQuestion[],\r\n};\r\n\r\nconst initialState: QuizState = {\r\n    started: false,\r\n    fetching: false,\r\n    questions: [],\r\n}\r\n\r\nconst shuffleAnswers = (state: QuizState, action: actionTypes.shuffleAnswers): QuizState => {\r\n    const { questions } = state;\r\n    const questionsWithAnswerId: IQuestion[] = [...questions];\r\n    questions.forEach((question,i) => {\r\n        let correctAnswerId = -1;\r\n        const answersAmmount = question.incorrect_answers.length + 1;\r\n        const isBoolType = answersAmmount === 2;\r\n        if (isBoolType) {\r\n            correctAnswerId = question.correct_answer === \"True\" ? 0 : 1;\r\n        } else {\r\n            correctAnswerId = Math.floor(Math.random() * answersAmmount);\r\n        }\r\n        questionsWithAnswerId[i].correctAnswerId = correctAnswerId;\r\n    });\r\n    return { ...state, questions: questionsWithAnswerId  }\r\n}\r\n\r\nconst fetchQuestionsStart = (state: QuizState, action: actionTypes.fetchQuestionsStart): QuizState => {\r\n    return { ...state, fetching: true };\r\n}\r\n\r\nconst fetchQuestionsSuccess = (state: QuizState, action: actionTypes.fetchQuestionsSuccess): QuizState => {\r\n    return { ...state, questions: action.questions, fetching: false };\r\n}\r\n\r\nconst fetchQuestionsFail = (state: QuizState, action: actionTypes.fetchQuestionsFail<any>): QuizState => {\r\n    console.log(action.error)\r\n    return { ...state, fetching: false };\r\n}\r\n\r\nconst quizStarted = (state: QuizState, action: actionTypes.quizStarted): QuizState => {\r\n    return { ...state, started: true }\r\n}\r\n\r\nconst quizEnded = (state: QuizState, action: actionTypes.endQuiz): QuizState => {\r\n    return { ...state, started: false }\r\n}\r\n\r\nconst quizQuit = (state: QuizState, action: actionTypes.quizQuit): QuizState => {\r\n    return { ...state, started: false}\r\n}\r\n\r\nconst reset = (state: QuizState, action: actionTypes.resetQuiz): QuizState => {\r\n    return initialState;\r\n}\r\n\r\nconst reducer = (state = initialState, action: actionTypes.QuizActions): QuizState => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_QUESTIONS_START: return fetchQuestionsStart(state, action);\r\n        case actionTypes.FETCH_QUESTIONS_SUCCESS: return fetchQuestionsSuccess(state, action);\r\n        case actionTypes.FETCH_QUESTIONS_FAIL: return fetchQuestionsFail(state, action);\r\n        case actionTypes.QUIZ_STARTED: return quizStarted(state, action);\r\n        case actionTypes.SHUFFLE_ANSWERS: return shuffleAnswers(state, action);\r\n        case actionTypes.QUIZ_ENDED: return quizEnded(state, action);\r\n        case actionTypes.QUIZ_QUIT: return quizQuit(state, action);\r\n        case actionTypes.RESET_QUIZ: return reset(state, action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nexport interface Category {\r\n    name: string, \r\n    id: number\r\n};\r\n\r\nexport interface ISetting<T> {\r\n    values: T[],\r\n    selected: T,\r\n}\r\n\r\nexport interface ISettings {\r\n    amount: ISetting<string>,\r\n    category: ISetting<Category>,\r\n    difficulty: ISetting<string>,\r\n    type: ISetting<string>,\r\n    apiURL: string,\r\n}\r\n\r\nexport interface StartPageState {\r\n    loading: boolean,\r\n    dataFetched: boolean,\r\n    settings: ISettings,\r\n}\r\n\r\nconst initialState: StartPageState = {\r\n    loading: false,\r\n    dataFetched: false,\r\n    settings: {\r\n        amount: {\r\n            values: [\"5\", \"10\", \"15\", \"20\", \"50\"],\r\n            selected: \"5\",\r\n        },\r\n        category: {\r\n            values: [{ name: 'Any Category', id: 0 }], // categories should be fetched from https://opentdb.com/api_category.php\r\n            selected: { name: 'Any Category', id: 0 },\r\n        },\r\n        difficulty: {\r\n            values: ['Easy', 'Medium', 'Hard', 'Any'],\r\n            selected: 'Any',\r\n        },\r\n        type: {\r\n            values: ['ABCD', 'True/False', 'Any'],\r\n            selected: 'Any',\r\n        },\r\n        apiURL: \"https://opentdb.com/api.php?amount=5&category=0&type=0&dificulty=0\",\r\n    }\r\n}\r\n\r\nconst fetchCategoriesStart = (state: StartPageState, action: actionTypes.fetchCategoriesStart): StartPageState => {\r\n    return { ...state, loading: true }\r\n}\r\n\r\nconst fetchCategoriesSuccess = (state: StartPageState, action: actionTypes.fetchCategoriesSuccess): StartPageState => {\r\n    const settings = {\r\n            ...state.settings,\r\n            category: {\r\n                ...state.settings.category,\r\n                values: [{name: 'Any Category',id: 0}].concat(action.categories),\r\n            }\r\n        }\r\n    return { ...state, loading: false, settings, dataFetched: true };\r\n}\r\n\r\nconst fetchCategoriesFail = (state: StartPageState, action: actionTypes.fetchCategoriesFail<{}>): StartPageState => {\r\n    console.log(\"Something went wrong\");\r\n    console.log(action.error);\r\n    return { ...state, loading: false }\r\n}\r\n\r\nconst setQuestionAmount = (state: StartPageState, action: actionTypes.setQuestionAmount): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        amount: {\r\n            ...state.settings.amount,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst setQuestionCategory = (state: StartPageState, action: actionTypes.setQuestionCategory): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        category: {\r\n            ...state.settings.category,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst setQuestionType = (state: StartPageState, action: actionTypes.setQuestionType): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        type: {\r\n            ...state.settings.type,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst setQuestionDifficulty = (state: StartPageState, action: actionTypes.setQuestionDifficulty): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        difficulty: {\r\n            ...state.settings.difficulty,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst resetStartPage = (state: StartPageState, action: actionTypes.resetStartPage): StartPageState => {\r\n    return initialState;\r\n}\r\n\r\nconst generateUrl = (state: StartPageState, action: actionTypes.generateURL): StartPageState => {\r\n    const { category, amount, difficulty, type } = state.settings;\r\n    const categoryID = category.values.filter(currCategory => currCategory.name === category.selected.name)[0].id;\r\n    const questionsAmount = amount.selected;\r\n    const selectedDifficulty = [\"easy\", \"medium\", \"hard\", \"0\"][difficulty.values.indexOf(difficulty.selected)];\r\n    const selectedType = [\"multiple\",\"boolean\",\"0\"][type.values.indexOf(type.selected)];\r\n    const apiURL = `https://opentdb.com/api.php?amount=${questionsAmount}&category=${categoryID}&type=${selectedType}&dificulty=${selectedDifficulty}`;\r\n    return {...state, settings: {...state.settings, apiURL: apiURL}};\r\n}\r\n\r\nconst reducer = (state = initialState, action: actionTypes.StartPageActions): StartPageState => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_CATEGORIES_START: return fetchCategoriesStart(state, action);\r\n        case actionTypes.FETCH_CATEGORIES_SUCCESS: return fetchCategoriesSuccess(state, action);\r\n        case actionTypes.FETCH_CATEGORIES_FAIL: return fetchCategoriesFail(state, action);\r\n        case actionTypes.SET_QUESTION_AMOUNT: return setQuestionAmount(state, action);\r\n        case actionTypes.SET_QUESTION_CATEGORY: return setQuestionCategory(state, action);\r\n        case actionTypes.SET_QUESTION_TYPE: return setQuestionType(state, action);\r\n        case actionTypes.SET_QUESTION_DIFFICULTY: return setQuestionDifficulty(state, action);\r\n        case actionTypes.GENERATE_URL: return generateUrl(state,action);\r\n        case actionTypes.RESET_START_PAGE: return resetStartPage(state,action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware, compose, combineReducers} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport quizReducer from './store/reducers/quiz';\nimport startPageReducer from './store/reducers/startPage';\n\ndeclare global {\n    interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\n    }\n}\n\nconst composeEnhancers = process.env.NODE_ENV ==='development' \n? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ \n: null || compose;\n\nconst rootReducer = combineReducers({\n    quiz: quizReducer,\n    startPage: startPageReducer,\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\nexport type AppState = ReturnType<typeof rootReducer>"],"sourceRoot":""}