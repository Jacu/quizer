{"version":3,"sources":["webpack:///./src/index.css?552e","index.css","styles.ts","utils/Colors/index.ts","containers/Menu/styles.ts","store/actions/quiz.ts","store/actions/actionTypes.ts","store/actions/startPage.ts","components/UI/Spinner/styles.ts","components/UI/Spinner/Spinner.tsx","components/SettingPanel/styles.ts","components/Inputs/ButtonInput/styles.ts","components/UI/Tile/styles.ts","components/UI/Tile/Tile.tsx","components/Inputs/ButtonInput/config.ts","components/Inputs/ButtonInput/index.tsx","components/Inputs/CategoryInput/styles.ts","components/Inputs/CategoryInput/index.tsx","components/Inputs/SliderInput/styles.ts","components/UI/Slider/styles.ts","components/UI/Slider/Slider.tsx","components/Inputs/SliderInput/index.tsx","components/SettingPanel/index.tsx","containers/Menu/Menu.tsx","containers/Quiz/styles.ts","components/Question/styles.ts","components/Question/Answer/styles.ts","components/Question/Answer/Answer.tsx","components/Question/Question.tsx","components/NavBar/styles.ts","components/NavBar/NavBar.tsx","components/UI/Button/styles.ts","components/UI/Button/Button.tsx","components/Question/Summary/styles.ts","components/Question/Summary/Summary.tsx","containers/Quiz/Quiz.tsx","App.tsx","store/reducers/quiz.ts","store/reducers/startPage.ts","index.tsx"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","locals","exports","push","root","App","styled","div","_templateObject","primaryTheme","correct","wrong","gray","StartPage","styles_templateObject","Menu","_templateObject2","quizerIntro","keyframes","_templateObject3","Title","h1","_templateObject4","SubTitle","_templateObject5","Button","Link","_templateObject6","initQuiz","dispatch","getState","apiURL","startPage","settings","reset","fetchQuestionsStart","axios","get","then","response","fetchQuestionsSuccess","data","results","shuffleAnswers","quizStarted","catch","err","fetchQuestionsFail","type","questions","error","endQuiz","fetchCategoriesStart","fetchCategoriesSuccess","trivia_categories","categories","fetchCategoriesFail","lds_dual_ring","Spinner_styles_templateObject","Spinner","styles_templateObject2","react_default","a","createElement","styles_Spinner","settingPanel","SettingPanel_styles_templateObject","IFontSize","ButtonInput","ButtonInput_styles_templateObject","Label","ButtonInput_styles_templateObject2","ButtonsContainer","styles_templateObject3","ITileSize","fontSizes","_fontSizes","Object","defineProperty","Small","Medium","Big","Tile","Tile_styles_templateObject","props","selected","fontSize","Tile_styles_templateObject2","Icon","FontAwesomeIcon","Tile_styles_templateObject3","styles_Tile","onClick","icon","faQuestion","styles_Label","header","icons","Any","ABCD","faList","True/False","faCheckSquare","Easy","faBaby","faGraduationCap","Hard","faCrown","getIcon","option","_ref","label","onChange","styles_ButtonInput","map","UI_Tile_Tile","CategoryInput","CategoryInput_styles_templateObject","CategoryInput_styles_templateObject2","colors","SelectContainer","CategoryInput_styles_templateObject3","Select","ReactSelect","styles_templateObject4","optionsFormatted","category","value","id","name","filter","pop","styles_CategoryInput","CategoryInput_styles_Label","classNamePrefix","className","newCategory","SliderInput","SliderInput_styles_templateObject","ValueLabel","SliderInput_styles_templateObject2","SliderInput_styles_templateObject3","SliderContainer","SliderInput_styles_templateObject4","Slider","styles_templateObject5","input","attrs","min","max","step","Slider_styles_templateObject","Slider_styles_Slider","e","target","styles_SliderInput","SliderInput_styles_Label","styles_Slider","UI_Slider_Slider","SettingPanel","amount","difficulty","onAmountChange","onCategoryChange","onDifficultyChange","onTypeChange","Inputs_SliderInput","Inputs_CategoryInput","values","Inputs_ButtonInput","connect","loading","init","generateURL","actions","setQuestionAmount","newAmount","setQuestionCategory","setQuestionType","newType","setQuestionDifficulty","newDifficulty","useEffect","styles_StartPage","UI_Spinner_Spinner","components_SettingPanel","styles_Button","to","Quiz","Quiz_styles_templateObject","StyleState","QuestionComponent","Question_styles_templateObject","Question","Question_styles_templateObject2","h3","Question_styles_templateObject3","CategoryLabel","p","Question_styles_templateObject4","AnswersContainer","Question_styles_templateObject5","isSelected","showAnswer","isCorrect","CorrectSelected","IncorrectSelected","Selected","CorrectNotSelected","Notselected","answerBackgroundColor","_answerBackgroundColo","answerBorderColor","_answerBorderColor","Answer","Answer_styles_templateObject","checkboxBorderColor","_checkboxBorderColor","checkboxBorderWidth","_checkboxBorderWidth","Checkbox","Answer_styles_templateObject2","answer","reveal","styles_Answer","question","answers","correctId","onAnswerPicked","selectedId","categoryLabel","concat","styles_Question","unescape","Question_Answer_Answer","key","NavBar","NavBar_styles_templateObject","NavBar_styles_templateObject2","QuestionCounter","NavBar_styles_templateObject3","ButtonContainer","NavBar_styles_templateObject4","_ref2","quiz","quit","currentQuestionNumber","questionsAmount","counterLabel","finished","styles_NavBar","react_router_dom","styles_Icon","faHome","Button_styles_templateObject","Button_styles_Button","children","Summary","Summary_styles_templateObject","AnswerContainer","Summary_styles_templateObject2","Summary_styles_templateObject3","CorrectAnswer","Summary_styles_templateObject4","correctAnswers","styles_Summary","questionId","Summary_styles_Question","correct_answer","started","dataLoading","fetching","isDataAvailable","dataFetched","end","_useState","useState","_useState2","slicedToArray","setFinished","_useState3","_useState4","questionNumber","setQuestionNumber","_useState5","_useState6","setCorrectAnswers","_useState7","_useState8","setSelectedId","length","correctAnswerId","_useState9","_useState10","inRevealMode","setInRevealMode","buttonLabel","react_router","toConsumableArray","incorrect_answers","splice","styles_Quiz","Question_Summary_Summary","components_Question_Question","selectedAnswerId","UI_Button_Button","isLastQuestion","components_NavBar_NavBar","routes","path","exact","component","styles_App","Component","initialState","reducer","state","arguments","action","objectSpread","console","log","questionsWithAnswerId","forEach","answersAmmount","Math","floor","random","quizQuit","_state$settings","categoryID","currCategory","selectedDifficulty","indexOf","selectedType","generateUrl","composeEnhancers","compose","rootReducer","combineReducers","quizReducer","startPageReducer","store","createStore","applyMiddleware","thunk","app","es","src_App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94fb9654.chunk.js","sourcesContent":["\nvar content = require(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"* {\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  \\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Roboto\\\", \\\"Oxygen\\\",\\n    \\\"Ubuntu\\\", \\\"Cantarell\\\", \\\"Fira Sans\\\", \\\"Droid Sans\\\", \\\"Helvetica Neue\\\",\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\n#_1YYU_vdtEoCzbtmk8tBvTU {\\n  position: absolute;\\n  height: 100%;\\n  width: 100%;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \\\"Courier New\\\",\\n    monospace;\\n}\\n\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"root\": \"_1YYU_vdtEoCzbtmk8tBvTU\"\n};","import styled from 'styled-components';\r\n\r\nexport const App = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    padding: 0;  \r\n    text-align: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n    position: absolute;\r\n    \r\n    font-family: 'Roboto', sans-serif;\r\n    font-weight: 400;\r\n  \r\n    color: #02283B;\r\n    color: #125271;\r\n\r\n    background: white;\r\n`;","export const primaryTheme = {\r\n    base: '#125271',\r\n};\r\nexport const secondaryTheme = {\r\n    base: '#19729F',\r\n};\r\n\r\nexport const correct = {\r\n    base: '#46C28E',\r\n    light: '#E9F7F1',\r\n    //dark: '', // TODO\r\n}\r\n\r\nexport const wrong = {\r\n    base: '#EC5252',\r\n    light: '#FAEBEB',\r\n    //dark: '', // TODO\r\n}\r\n\r\nexport const gray = {\r\n    base: '#D3D3D3',\r\n    light: '#F2F2F2',\r\n}","import styled, { keyframes } from \"styled-components\";\r\nimport { Link } from 'react-router-dom';\r\nimport { primaryTheme } from \"~/utils/Colors\";\r\n\r\nexport const StartPage = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    align-self: center;\r\n    height: 50%;\r\n    width: 100%;\r\n`;\r\n\r\nexport const Menu = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    max-width: 650px;\r\n`;\r\n\r\nconst quizerIntro = keyframes`\r\n    0% {\r\n        transform: scale(0, 0) rotate(0deg);\r\n    }\r\n    60% {\r\n        transform: scale(1.25, 1.25) rotate(360deg) skew(-15deg);\r\n    }\r\n    100% {\r\n        transform: scale(1.15, 1.25) rotate(355deg) skew(-10deg);\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    margin: 20px 0;\r\n    font-size: 6rem;\r\n    animation: ${quizerIntro} 0.4s 0.5s ease-out forwards;\r\n    background: none;\r\n    color: ${primaryTheme.base};\r\n    transform: scale(0, 0);\r\n`;\r\n\r\nexport const SubTitle = styled.div`\r\n    color: ${primaryTheme.base};\r\n`;\r\n\r\nexport const Button = styled(Link)`\r\n    color: white;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n    background: ${primaryTheme.base};\r\n    padding: 20px 50px;\r\n    font-weight: bold;\r\n    font-size: 2rem;\r\n    transition: transform 0.25s;\r\n    margin: 2rem;\r\n    :hover {\r\n        transform: scale(1.1,1.1);\r\n    }\r\n`;","import * as actionTypes from './actionTypes';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { Dispatch } from 'react';\r\nimport { Question } from '../reducers/quiz';\r\nimport { AppState } from \"~/index\"; \r\n\r\ninterface CategoriesServerData {\r\n    results: Question[];\r\n};\r\n\r\nexport const initQuiz = () => {\r\n    return (dispatch: Dispatch<actionTypes.AllActions>, getState: () => AppState ) => {\r\n        const apiURL = getState().startPage.settings.apiURL;\r\n        dispatch(reset());\r\n        dispatch(fetchQuestionsStart());\r\n        axios.get(apiURL)\r\n            .then((response: AxiosResponse<CategoriesServerData>) => {\r\n                dispatch(fetchQuestionsSuccess(response.data.results));                \r\n            })\r\n            .then( () => {\r\n                dispatch(shuffleAnswers());\r\n                dispatch(quizStarted())\r\n            })\r\n            .catch((err: AxiosError) => {                \r\n                dispatch(fetchQuestionsFail(err))\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsStart = (): actionTypes.fetchQuestionsStart => {\r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_START,\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsSuccess = (data: Question[]): actionTypes.fetchQuestionsSuccess => {    \r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_SUCCESS,\r\n        questions: data,\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsFail = (error: AxiosError): actionTypes.fetchQuestionsFail<AxiosError> => {\r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_FAIL,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const shuffleAnswers = (): actionTypes.shuffleAnswers => {\r\n    return {\r\n        type: actionTypes.SHUFFLE_ANSWERS,\r\n    }\r\n}\r\n\r\nexport const quizStarted = (): actionTypes.quizStarted => {\r\n    return {\r\n        type: actionTypes.QUIZ_STARTED,\r\n    }\r\n}\r\n\r\nexport const quizEnded = (): Dispatch<Dispatch<actionTypes.QuizActions>> => {\r\n    return (dispatch: Dispatch<actionTypes.QuizActions>) => {\r\n        dispatch(endQuiz());        \r\n    }\r\n}\r\n\r\nexport const quizQuit = (): actionTypes.quizQuit  => {\r\n    return {\r\n        type: actionTypes.QUIZ_QUIT,      \r\n    }\r\n}\r\n\r\nexport const endQuiz = (): actionTypes.endQuiz => {\r\n    return {\r\n        type: actionTypes.QUIZ_ENDED,\r\n    }\r\n}\r\n\r\nexport const reset = (): actionTypes.resetQuiz => {\r\n    return {\r\n        type: actionTypes.RESET_QUIZ,\r\n    }\r\n}","import { Category } from \"../reducers/startPage\";\r\nimport { Question } from \"../reducers/quiz\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const INIT = 'INIT';\r\n\r\nexport const FETCH_CATEGORIES_START = 'FETCH_CATEGORIES_START';\r\nexport const FETCH_CATEGORIES_SUCCESS = 'FETCH_CATEGORIES_SUCCESS';\r\nexport const FETCH_CATEGORIES_FAIL = 'FETCH_CATEGORIES_FAIL';\r\n\r\nexport const SET_QUESTION_AMOUNT = 'SET_QUESTION_AMOUNT';\r\nexport const SET_QUESTION_CATEGORY = 'SET_QUESTION_CATEGORY';\r\nexport const SET_QUESTION_TYPE = 'SET_QUESTION_TYPE';\r\nexport const SET_QUESTION_DIFFICULTY = 'SET_QUESTION_DIFFICULTY';\r\n\r\nexport const GENERATE_URL = 'GENERATE_URL';\r\n\r\nexport const RESET_START_PAGE = 'RESET_START_PAGE';\r\n\r\n// ----------------------------\r\n\r\nexport const QUIZ_STARTED = 'QUIZ_STARTED';\r\n\r\nexport const FETCH_QUESTIONS_START = 'FETCH_QUESTIONS_START';\r\nexport const FETCH_QUESTIONS_SUCCESS = 'FETCH_QUESTIONS_SUCCESS';\r\nexport const FETCH_QUESTIONS_FAIL = 'FETCH_QUESTIONS_FAIL';\r\n\r\nexport const SHUFFLE_ANSWERS = 'SHUFFLE_ANSWERS';\r\n\r\nexport const QUIZ_ENDED = 'QUIZ_ENDED';\r\nexport const QUIZ_QUIT = 'QUIZ_QUIT';\r\n\r\nexport const RESET_QUIZ = \"RESET_QUIZ\";\r\n\r\n// ----------------------------\r\n\r\nexport interface fetchQuestionsStart {\r\n    type: typeof FETCH_QUESTIONS_START,\r\n}\r\n\r\nexport interface fetchQuestionsSuccess {\r\n    type: typeof FETCH_QUESTIONS_SUCCESS,\r\n    questions: Question[],\r\n}\r\n\r\nexport interface fetchQuestionsFail<T> {\r\n    type: typeof FETCH_QUESTIONS_FAIL,\r\n    error: T,\r\n}\r\n\r\nexport interface shuffleAnswers {\r\n    type: typeof SHUFFLE_ANSWERS,\r\n}\r\n\r\nexport interface quizStarted {\r\n    type: typeof QUIZ_STARTED,\r\n}\r\n\r\nexport interface endQuiz {\r\n    type: typeof QUIZ_ENDED,\r\n}\r\n\r\nexport interface quizQuit {\r\n    type: typeof QUIZ_QUIT,\r\n}\r\n\r\nexport interface resetQuiz {\r\n    type: typeof RESET_QUIZ,\r\n}\r\n\r\nexport type QuizActions = fetchQuestionsStart | fetchQuestionsSuccess | fetchQuestionsFail<any> | shuffleAnswers |\r\nquizStarted |  endQuiz | quizQuit | resetQuiz;\r\n\r\n// ----------------------------\r\n\r\nexport interface init extends Dispatch { }\r\n\r\nexport interface fetchCategoriesStart {\r\n    type: typeof FETCH_CATEGORIES_START,\r\n}\r\n\r\nexport interface fetchCategoriesSuccess {\r\n    type: typeof FETCH_CATEGORIES_SUCCESS,\r\n    categories: Category[],\r\n}\r\n\r\nexport interface fetchCategoriesFail<T> {\r\n    type: typeof FETCH_CATEGORIES_FAIL,\r\n    error: T,\r\n}\r\n\r\nexport interface setQuestionAmount {\r\n    type: typeof SET_QUESTION_AMOUNT,\r\n    value: string,\r\n}\r\n\r\nexport interface setQuestionCategory {\r\n    type: typeof SET_QUESTION_CATEGORY,\r\n    value: Category,\r\n}\r\n\r\nexport interface setQuestionType {\r\n    type: typeof SET_QUESTION_TYPE,\r\n    value: string,\r\n}\r\n\r\nexport interface setQuestionDifficulty {\r\n    type: typeof SET_QUESTION_DIFFICULTY,\r\n    value: string,\r\n}\r\n\r\nexport interface generateURL {\r\n    type: typeof GENERATE_URL,\r\n}\r\n\r\nexport interface resetStartPage {\r\n    type: typeof RESET_START_PAGE,\r\n}\r\n\r\nexport type StartPageActions = fetchCategoriesStart | fetchCategoriesSuccess | fetchCategoriesFail<any> |\r\n    setQuestionAmount | setQuestionCategory | setQuestionType | setQuestionDifficulty | generateURL | resetStartPage;\r\n\r\n\r\nexport type AllActions = QuizActions | StartPageActions;","import { Category } from '../reducers/startPage';\r\nimport * as actionTypes from './actionTypes';\r\nimport axios, { AxiosResponse, AxiosError } from 'axios';\r\nimport { Dispatch } from 'redux';\r\n\r\ninterface CategoriesServerData {\r\n    trivia_categories: Category[];\r\n}\r\n\r\nexport const init = () => {\r\n    return (dispatch: Dispatch<actionTypes.StartPageActions>) => {\r\n        dispatch(reset());\r\n        dispatch(fetchCategoriesStart());\r\n        axios.get('https://opentdb.com/api_category.php')\r\n            .then((response: AxiosResponse<CategoriesServerData>) => {\r\n                dispatch(fetchCategoriesSuccess(response.data.trivia_categories))\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(fetchCategoriesFail(err))\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesStart = (): actionTypes.fetchCategoriesStart => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_START,\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesSuccess = (trivia_categories: Category[]): actionTypes.fetchCategoriesSuccess => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_SUCCESS,\r\n        categories: trivia_categories,\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesFail = (error: AxiosError): actionTypes.fetchCategoriesFail<AxiosError> => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_FAIL,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const setQuestionAmount = (value: string): actionTypes.setQuestionAmount => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_AMOUNT,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const setQuestionCategory = (value: Category): actionTypes.setQuestionCategory => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_CATEGORY,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const setQuestionDifficulty = (value: string): actionTypes.setQuestionDifficulty => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_DIFFICULTY,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const setQuestionType = (value: string): actionTypes.setQuestionType => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_TYPE,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const generateURL = (): actionTypes.generateURL => {\r\n    return {\r\n        type: actionTypes.GENERATE_URL,\r\n    }\r\n}\r\n\r\nconst reset = (): actionTypes.resetStartPage => {\r\n    return {\r\n        type: actionTypes.RESET_START_PAGE,\r\n    }\r\n}","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst lds_dual_ring = keyframes`\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n  display: flex;\r\n  width: 64px;\r\n  height: 64px;\r\n  margin: 36px auto;\r\n  \r\n  :after {\r\n    content: \" \";\r\n    display: block;\r\n    width: 46px;\r\n    height: 46px;\r\n    margin: 1px;\r\n    border-radius: 50%;\r\n    border: 5px solid #125271;\r\n    border-color: #125271 transparent #125271 transparent;\r\n    animation: ${lds_dual_ring} 1.2s linear infinite;\r\n  }\r\n`;","import React from 'react';\r\nimport * as styled from './styles'\r\n\r\nconst Spinner = () => <styled.Spinner/>\r\n\r\nexport default Spinner;","import styled from 'styled-components';\r\n\r\nexport const settingPanel = styled.div`\r\n    width: 100%;\r\n    max-width: 900px;\r\n    margin: 20px 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const ButtonInput = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 5px 0px;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    text-align: end;\r\n    flex: 1;\r\n    font-size: 1.5rem;\r\n    padding: 0 20px;\r\n    border-right: 1px solid #D3D3D3;\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex: 4;\r\n    flex-wrap: wrap;\r\n`;","import styled from 'styled-components';\r\nimport { gray, correct, primaryTheme } from \"~/utils/Colors\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nenum IFontSize {Small, Medium, Big};\r\n\r\ninterface Tile {\r\n    selected: boolean,\r\n    fontSize: IFontSize,\r\n}\r\n\r\ninterface Selectable {\r\n    selected: boolean,\r\n}\r\n\r\nconst fontSizes = {\r\n    [IFontSize.Small]: '0.75rem',\r\n    [IFontSize.Medium]: '1rem',\r\n    [IFontSize.Big]: '1.75rem',\r\n}\r\n\r\nexport const Tile = styled.div<Tile>`\r\n    width: 82px;\r\n    height: 82px;\r\n    border-width: ${props => props.selected ? '2px' : '1px'};\r\n    border-style: solid;\r\n    border-color: ${props => props.selected ? primaryTheme.base : gray.base};\r\n    border-radius: 6px;\r\n    margin: 5px;\r\n    font-size: ${props => fontSizes[props.fontSize]};\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    cursor: pointer;\r\n    :hover {\r\n        box-shadow: 0px 0px 4px 0px #ababab;\r\n    }\r\n    color: ${props => props.selected ? primaryTheme.base : gray.base};\r\n    box-shadow: ${props => props.selected ? '0px 0px 4px 0px #ababab' : null};\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    white-space: nowrap;\r\n`;\r\n\r\nexport const Icon = styled(FontAwesomeIcon)<Selectable>`\r\n    color: inherit;\r\n    font-size: 2rem;\r\n    :hover {\r\n        color: inherit;\r\n    }\r\n    \r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\nimport { faQuestion } from '@fortawesome/free-solid-svg-icons';\r\n\r\nenum ITileSize {Small, Medium, Big};\r\nexport enum IFontSize {Small, Medium, Big};\r\n\r\ninterface ITile {\r\n    header: string,\r\n    selected: boolean,\r\n    onClick: () => void,\r\n    icon?: any,\r\n    size?: ITileSize, // TODO\r\n    fontSize?: IFontSize,\r\n}\r\n\r\n\r\nconst Tile: React.FC<ITile> = (props) => {\r\n    return (\r\n        <styled.Tile fontSize={props.fontSize != null ? props.fontSize : IFontSize.Medium} selected={props.selected} onClick={props.onClick}>\r\n            <styled.Icon selected={props.selected} icon={props.icon || faQuestion} />\r\n            <styled.Label>{props.header}</styled.Label>\r\n        </styled.Tile>\r\n    );\r\n}\r\n\r\nexport default Tile;","import { faQuestion, faList, faCheckSquare, faBaby, faCrown, faGraduationCap } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst icons = {\r\n    \"Any\": faQuestion,\r\n    \"ABCD\": faList, \"True/False\": faCheckSquare,\r\n    \"Easy\": faBaby, \"Medium\": faGraduationCap, \"Hard\": faCrown,\r\n}\r\n\r\n// TODO\r\n// const colors = { \r\n//     \"Any\": faQuestion,\r\n//     \"ABCD\": faList, \"True/False\": faCheckSquare,\r\n//     \"Easy\": faBaby, \"Medium\": faGraduationCap, \"Hard\": faCrown,\r\n// }\r\n\r\nexport const getIcon = (option: string) => {\r\n    return icons[option] || faQuestion;\r\n}\r\n","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Tile from \"~/components/UI/Tile/Tile\";\r\nimport { IInput } from '../';\r\nimport { getIcon } from './config';\r\n\r\nconst ButtonInput: React.FC<IInput<string>> = ({label, options, selected, onChange}) => {\r\n    return (\r\n        <styled.ButtonInput>\r\n            <styled.Label>{label}</styled.Label>\r\n            <styled.ButtonsContainer>\r\n                {options.map( option => (\r\n                    <Tile icon={getIcon(option)} header={option} selected={option===selected} onClick={() => onChange(option)} />\r\n                ))}\r\n            </styled.ButtonsContainer>\r\n        </styled.ButtonInput>\r\n    )\r\n}\r\n\r\nexport default ButtonInput;","import styled from 'styled-components';\r\nimport ReactSelect from 'react-select';\r\nimport * as colors from '~/utils/Colors';\r\n\r\nexport const CategoryInput = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 10px 0px;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    text-align: end;\r\n    flex: 1;\r\n    font-size: 1.5rem;\r\n    padding: 0 20px;\r\n    border-right: 1px solid ${colors.gray.base};\r\n`;\r\n\r\nexport const SelectContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex: 4;\r\n`;\r\n\r\nexport const Select = styled(ReactSelect)`\r\n    &.reactSelect {\r\n        width: 100%;\r\n        max-width: 400px;\r\n        color: ${colors.primaryTheme.base};\r\n        & .rSelect__control--is-focused {\r\n            border: 1px solid lightgray;\r\n            box-shadow: none;\r\n        }\r\n        & .rSelect__option--is-focused {\r\n            background: lightgray;\r\n        }\r\n        & .rSelect__option--is-selected {\r\n            background: ${colors.primaryTheme.base};\r\n        }\r\n        & .rSelect__single-value {\r\n            color: inherit;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { Category } from \"~/store/reducers/startPage\";\r\nimport { IInput } from '../';\r\n\r\nconst CategoryInput: React.FC<IInput<Category>> = (props) => {\r\n    const optionsFormatted = props.options.map( category => ({value: category.id, label: category.name}));\r\n    const value = optionsFormatted.filter( category => category.value === props.selected.id).pop();\r\n    const handleChange = (newCategory) => {\r\n        props.onChange({id: +newCategory, name: newCategory.label});\r\n    }\r\n    \r\n    return (\r\n        <styled.CategoryInput>\r\n            <styled.Label>{props.label}</styled.Label>\r\n            <styled.SelectContainer>\r\n                <styled.Select classNamePrefix=\"rSelect\" className=\"reactSelect\" value={value} options={optionsFormatted} onChange={handleChange}/>\r\n            </styled.SelectContainer>\r\n        </styled.CategoryInput>\r\n    )\r\n}\r\n\r\nexport default CategoryInput;","import styled from 'styled-components';\r\nimport * as colors from '~/utils/Colors';\r\n\r\nexport const SliderInput = styled.div`\r\n    display: flex;\r\n    margin: 10px 0px;\r\n`;\r\n\r\nexport const ValueLabel = styled.div`\r\n    font-size: 1.5rem;\r\n    flex: 1;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    width: 100%;\r\n    flex: 1;\r\n    text-align: end;\r\n    font-size: 1.5rem;\r\n    padding: 0 20px;\r\n    border-right: 1px solid ${colors.gray.base};\r\n`;\r\n\r\nexport const SliderContainer = styled.div`\r\n    width: 100%;\r\n    flex: 4;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const Slider = styled.div`\r\n    flex: 3;\r\n    padding-right: 50px;\r\n`;","import styled from 'styled-components';\r\nimport * as colors from '~/utils/Colors';\r\n\r\ninterface ISlider {\r\n    min: number,\r\n    max: number,\r\n}\r\n\r\nexport const Slider = styled.input.attrs<ISlider>(props => {\r\n    return {\r\n    type: \"range\",\r\n    min: props.min,\r\n    max: props.max,\r\n    step: 5,\r\n    }\r\n})`\r\n    -webkit-appearance: none;\r\n    width: 100%;\r\n    height: 8px;\r\n    background: lightgrey;\r\n    outline: none;\r\n    border-radius: 16px;\r\n\r\n    ::-webkit-slider-thumb {\r\n        -webkit-appearance: none;\r\n        appearance: none;\r\n        width: 20px;\r\n        height: 20px;\r\n        background: ${colors.primaryTheme.base};\r\n        border-radius: 50%;\r\n        cursor: pointer;\r\n    }\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface ISlider {\r\n    value: string,\r\n    min: number,\r\n    max: number,\r\n    onChange: (value: string) => void,\r\n}\r\n\r\nconst Slider: React.FC<ISlider> = (props) => {\r\n    const handleSliderChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        props.onChange(e.target.value);\r\n    }\r\n    return (\r\n        <styled.Slider min={props.min} max={props.max} value={props.value} onChange={handleSliderChange}/>\r\n    );\r\n}\r\n\r\nexport default Slider;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Slider from '~/components/UI/Slider/Slider';\r\nimport { IInput } from '../';\r\n\r\nconst SliderInput: React.FC<IInput<string>> = ({label, selected, options, onChange}) => {\r\n    return (\r\n        <styled.SliderInput>\r\n            <styled.Label>{label}</styled.Label>\r\n            <styled.SliderContainer>\r\n                <styled.ValueLabel>{selected}</styled.ValueLabel>\r\n                <styled.Slider>\r\n                    <Slider value={selected} min={+options[0]} max={+options[1]} onChange={onChange} />\r\n                </styled.Slider>\r\n            </styled.SliderContainer>\r\n        </styled.SliderInput>\r\n    )\r\n};\r\n\r\nexport default SliderInput;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { ISetting, Category } from \"~/store/reducers/startPage\";\r\nimport { CategoryInput, SliderInput, ButtonInput } from '../Inputs';\r\n\r\ninterface ISettingPanel {\r\n    amount: ISetting<string>,\r\n    category: ISetting<Category>,\r\n    difficulty: ISetting<string>,\r\n    type: ISetting<string>,\r\n    onAmountChange: (newAmount: string) => void,\r\n    onCategoryChange: (newAmount: Category) => void,\r\n    onTypeChange: (newAmount: string) => void,\r\n    onDifficultyChange: (newAmount: string) => void,\r\n}\r\n\r\nconst SettingPanel: React.FC<ISettingPanel> = (props) => {\r\n    const {amount, category, difficulty, type} = props;\r\n    const {onAmountChange, onCategoryChange, onDifficultyChange, onTypeChange } = props;\r\n\r\n    return (\r\n        <styled.settingPanel>\r\n            <SliderInput label=\"Quantity\" options={[\"5\",\"30\"]} selected={amount.selected} onChange={onAmountChange} />\r\n            <CategoryInput label=\"Cateogry\" options={category.values} selected={category.selected} onChange={onCategoryChange} />\r\n            <ButtonInput label=\"Type\" options={type.values} selected={type.selected} onChange={onTypeChange} />\r\n            <ButtonInput label=\"Difficulty\" options={difficulty.values} selected={difficulty.selected} onChange={onDifficultyChange} />\r\n        </styled.settingPanel>\r\n    )\r\n}\r\n\r\nexport default SettingPanel;","import React, { useEffect } from 'react';\r\nimport * as styled from './styles';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport { ISettings, Category } from \"~/store/reducers/startPage\";\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { AppState } from \"~/index\";\r\nimport SettingPanel from '~/components/SettingPanel';\r\n\r\ninterface StartPageProps {\r\n}\r\n\r\ninterface StateProps {\r\n    settings: ISettings,\r\n    loading: boolean,\r\n    apiURL: string,\r\n}\r\n\r\ninterface DispatchProps {\r\n    init: () => void,\r\n    generateURL: () => void,\r\n    initQuiz: () => void,\r\n    setQuestionAmount: (value: string) => void,\r\n    setQuestionCategory: (value: Category) => void,\r\n    setQuestionType: (value: string) => void,\r\n    setQuestionDifficulty: (value: string) => void,\r\n}\r\n\r\ntype Props = StartPageProps & StateProps & DispatchProps;\r\n\r\nconst StartPage: React.FC<Props> = (props) => {\r\n    const { init, settings, loading, generateURL, initQuiz } = props;\r\n    const { setQuestionAmount, setQuestionCategory, setQuestionType, setQuestionDifficulty } = props;\r\n    const {amount, category, difficulty, type } = settings;\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const handleStartButtonClick = () => {\r\n        generateURL();\r\n        initQuiz();\r\n    }\r\n\r\n    return (\r\n        <styled.StartPage>\r\n            <styled.Menu>\r\n                <styled.Title>Quizer</styled.Title>\r\n                <styled.SubTitle>\r\n                    <p>Quiz generator with use of Trivia API opentdb.com</p>\r\n                    <p>created by Jacek Smetek</p>\r\n                </styled.SubTitle>\r\n                {loading === true \r\n                    ? <Spinner />\r\n                    : <SettingPanel \r\n                        amount={amount}\r\n                        onAmountChange={setQuestionAmount}\r\n                        category={category}\r\n                        onCategoryChange={setQuestionCategory}\r\n                        difficulty={difficulty}\r\n                        onDifficultyChange={setQuestionDifficulty}\r\n                        type={type}\r\n                        onTypeChange={setQuestionType}\r\n                    /> }\r\n            </styled.Menu>\r\n            {!loading ? <styled.Button to=\"/quiz\" onClick={handleStartButtonClick}> Start </styled.Button> : null}\r\n        </styled.StartPage>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ startPage }: AppState): StateProps => {\r\n    return {\r\n        settings: startPage.settings,\r\n        loading: startPage.loading,\r\n        apiURL: startPage.settings.apiURL,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch): DispatchProps => {\r\n    return {\r\n        init: () => dispatch(actions.init()),\r\n        generateURL: () => dispatch(actions.generateURL()),\r\n        initQuiz: () => dispatch(actions.initQuiz()),\r\n        setQuestionAmount: (newAmount) => dispatch(actions.setQuestionAmount(newAmount)),\r\n        setQuestionCategory: (newCategory) => dispatch(actions.setQuestionCategory(newCategory)),\r\n        setQuestionType: (newType) => dispatch(actions.setQuestionType(newType)),\r\n        setQuestionDifficulty: (newDifficulty) => dispatch(actions.setQuestionDifficulty(newDifficulty)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StartPage);","import styled from \"styled-components\";\r\n\r\nexport const Quiz = styled.div`\r\n    align-self: center;\r\n    width: 80%;\r\n    max-width: 700px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const QuestionComponent = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n`;\r\n\r\nexport const QuestionHeader = styled.div`\r\n   display: flex;\r\n`;\r\n\r\nexport const Question = styled.h3`\r\n    display: flex;\r\n    margin: 15px 0;\r\n`;\r\n\r\nexport const CategoryLabel = styled.p` \r\n    font-style: italic;\r\n    display: flex;\r\n`;\r\n\r\nexport const AnswersContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;","import styled from 'styled-components';\r\nimport * as colors from '~/utils/Colors';\r\n\r\ninterface AnswerProps {\r\n    isSelected: boolean,\r\n    showAnswer: boolean,\r\n    isCorrect: boolean,\r\n}\r\n\r\nenum StyleState { CorrectSelected, IncorrectSelected, Selected, CorrectNotSelected, Notselected }\r\n\r\nconst getState = (props: AnswerProps): StyleState => {\r\n    const { isSelected, showAnswer, isCorrect} = props;\r\n    return isSelected \r\n        ? showAnswer\r\n            ? isCorrect \r\n                ? StyleState.CorrectSelected \r\n                : StyleState.IncorrectSelected\r\n            : StyleState.Selected\r\n        : showAnswer && isCorrect \r\n            ? StyleState.CorrectNotSelected\r\n            : StyleState.Notselected\r\n};\r\n\r\nconst answerBackgroundColor = {\r\n    [StyleState.CorrectSelected]: colors.correct.light,\r\n    [StyleState.IncorrectSelected]: colors.wrong.light,\r\n    [StyleState.Selected]: 'transparent',\r\n    [StyleState.CorrectNotSelected]: colors.correct.light,\r\n    [StyleState.Notselected]: 'transparent',\r\n}\r\n\r\nconst answerBorderColor = {\r\n    [StyleState.CorrectSelected]: colors.correct.base,\r\n    [StyleState.IncorrectSelected]: colors.wrong.base,\r\n    [StyleState.Selected]: colors.gray.base,\r\n    [StyleState.CorrectNotSelected]: colors.gray.base,\r\n    [StyleState.Notselected]: colors.gray.base,\r\n}\r\n\r\nexport const Answer = styled.div<AnswerProps>`\r\n    display: flex;\r\n    width: 100%;\r\n    padding: 15px 0;\r\n    cursor: pointer;\r\n    background-color: ${props => answerBackgroundColor[getState(props)]};\r\n    :hover {\r\n        background: ${colors.gray.light};\r\n    }\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: ${props => answerBorderColor[getState(props)]};\r\n    margin: 5px 0;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst checkboxBorderColor = {\r\n    [StyleState.CorrectSelected]: colors.correct.base,\r\n    [StyleState.IncorrectSelected]: colors.wrong.base,\r\n    [StyleState.Selected]: colors.primaryTheme.base,\r\n    [StyleState.CorrectNotSelected]: colors.correct.base,\r\n    [StyleState.Notselected]: colors.gray.base,\r\n}\r\n\r\nconst checkboxBorderWidth = {\r\n    [StyleState.CorrectSelected]: '10px',\r\n    [StyleState.IncorrectSelected]: '6px',\r\n    [StyleState.Selected]: '6px',\r\n    [StyleState.CorrectNotSelected]: '10px',\r\n    [StyleState.Notselected]: '1px',\r\n}\r\n\r\nexport const Checkbox = styled.div<AnswerProps>`\r\n    width: 20px;\r\n    height: 20px;\r\n    border-width: ${props => checkboxBorderWidth[getState(props)]};\r\n    border-style: solid;\r\n    border-color: ${props => checkboxBorderColor[getState(props)]};\r\n    margin: 0 10px;\r\n    border-radius: 50%;\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface AnswerProps {\r\n    answer: string,\r\n    isSelected: boolean,\r\n    isCorrect: boolean,\r\n    reveal: boolean,\r\n    onClick: () => void,\r\n}\r\n\r\nconst Answer: React.FC<AnswerProps> = ({isSelected, onClick, answer, isCorrect, reveal}) => \r\n    <styled.Answer \r\n        isSelected={isSelected}\r\n        isCorrect={isCorrect}\r\n        showAnswer={reveal} \r\n        onClick={!reveal ? onClick : undefined} >\r\n        <styled.Checkbox showAnswer={reveal} isCorrect={isCorrect} isSelected={isSelected} />\r\n        {answer} \r\n    </styled.Answer>\r\n\r\nexport default Answer;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Answer from './Answer/Answer';\r\nimport { Question as IQuiestion } from \"~/store/reducers/quiz\";\r\nimport unescape from '@favware/unescape';\r\n\r\ninterface QuestionProps {\r\n    question: IQuiestion,\r\n    answers: string[],\r\n    correctId: number,\r\n    reveal: boolean,\r\n    selectedId: number,\r\n    onAnswerPicked: (answerId: number) => void,\r\n}\r\n\r\nconst Question: React.FunctionComponent<QuestionProps> = ({ question, answers, correctId, reveal, onAnswerPicked, selectedId }) => {\r\n    const categoryLabel = `Category: ${question.category}`;\r\n\r\n    return (\r\n        <styled.QuestionComponent>\r\n            <styled.CategoryLabel>{categoryLabel}</styled.CategoryLabel>\r\n            <styled.Question>{unescape(question.question)}</styled.Question>\r\n            <styled.AnswersContainer>\r\n                {answers.map((answer, i) => (\r\n                    <Answer\r\n                        key={i}\r\n                        answer={unescape(answer)}\r\n                        isSelected={selectedId === i}\r\n                        isCorrect={correctId === i}\r\n                        reveal={reveal}\r\n                        onClick={() => onAnswerPicked(i)} />\r\n                ))}\r\n            </styled.AnswersContainer>\r\n        </styled.QuestionComponent>\r\n    );\r\n};\r\n\r\nexport default Question;","import styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport const NavBar = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: fixed;\r\n    text-align: left;\r\n    background: #F2F2F2;\r\n    width: 100%;\r\n    bottom: 0;\r\n    padding: 0 15px;\r\n`;\r\n\r\nexport const Icon = styled(FontAwesomeIcon)`\r\n    font-size: 2rem;\r\n    margin: 15px;\r\n    color: #125271;\r\n`;\r\n\r\nexport const QuestionCounter = styled.div`\r\n\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n\r\n`;","import React from 'react'\r\nimport * as styled from './styles'\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\nimport { AppState } from '../../index';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '~/store/actions/index';\r\n\r\ninterface DispatchProps {\r\n    quit: () => void,\r\n};\r\n\r\ninterface StateProps {\r\n\r\n};\r\n\r\ninterface NavBarProps {\r\n    currentQuestionNumber: number,\r\n    questionsAmount: number,\r\n    loading: boolean,\r\n    finished: boolean,\r\n};\r\n\r\ntype Props = DispatchProps & StateProps & NavBarProps;\r\n\r\nconst NavBar: React.FC<Props> = ({quit, currentQuestionNumber, questionsAmount, loading, finished}) => {\r\n    const counterLabel = finished ? null : loading ? 'Loading...' : `Question ${currentQuestionNumber} of ${questionsAmount}`\r\n    return (\r\n    <styled.NavBar>\r\n        <styled.QuestionCounter>{counterLabel}</styled.QuestionCounter>\r\n        <styled.ButtonContainer>\r\n            <Link to=\"/\" onClick={quit}> <styled.Icon icon={faHome}/> </Link>\r\n        </styled.ButtonContainer>\r\n    </styled.NavBar>\r\n);}\r\n\r\nconst mapStateToProps = ({ quiz, startPage }: AppState): StateProps => {\r\n    return {\r\n        // questionsAmount: quiz.questions.amount,\r\n        // quizStarted: quiz.started,\r\n        // quizFinished: quiz.finished,\r\n        // ended: quiz.finished,\r\n        // dataLoading: quiz.questions.fetching,\r\n        // isDataAvailable: startPage.dataFetched,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch ): DispatchProps => {\r\n    return {\r\n        quit: () => dispatch(actions.quizQuit()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.div`\r\n    color: white;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n    background: #EC5252;\r\n    padding: 15px 25px;\r\n    font-size: 1.25rem;\r\n    margin: 2rem;\r\n    :hover {\r\n        background: #992337;\r\n    }\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface ButtonProps {\r\n    label: string,\r\n    onClick: () => void,\r\n};\r\n\r\nconst Button: React.FC<ButtonProps> = props => {\r\n    return (\r\n        <styled.Button\r\n            children={props.label}\r\n            onClick={props.onClick} />\r\n    )\r\n}\r\n\r\nexport default Button;","import styled from 'styled-components';\r\nimport * as colors from '~/utils/Colors';\r\n\r\ninterface IAnswerContainer {\r\n    isCorrect: boolean,\r\n}\r\n\r\nexport const Summary = styled.div`\r\n`;\r\n\r\nexport const AnswerContainer = styled.div<IAnswerContainer>`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 15px 0;\r\n    margin: 5px;\r\n    background-color: ${({isCorrect}) => isCorrect ? colors.correct.light : colors.wrong.light};\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: ${({isCorrect}) => isCorrect ? colors.correct.base : colors.wrong.base };\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport const Question = styled.div`\r\n    text-align: left;\r\n    width: 80%;\r\n    padding: 0 15px;\r\n`;\r\n\r\nexport const CorrectAnswer = styled.div`\r\n    width: 20%;\r\n    text-align: left;\r\n    border-left: 1px solid lightgray;\r\n    display: flex;\r\n    padding: 0 15px;\r\n    align-items: center;\r\n    overflow: hidden;\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { Question as IQuiestion } from \"~/store/reducers/quiz\";\r\n\r\ninterface SummaryProps {\r\n    questions: IQuiestion[],\r\n    correctAnswers: boolean[],\r\n}\r\n\r\ntype Props = SummaryProps;\r\n\r\nconst Summary: React.FC<Props> = ({ questions, correctAnswers }) => {\r\n\r\n    return (\r\n        <styled.Summary>\r\n            {questions.map((question, questionId) =>\r\n            <styled.AnswerContainer key={questionId} isCorrect={correctAnswers[questionId]}>\r\n                <styled.Question>\r\n                    {question.question}\r\n                </styled.Question>\r\n                <styled.CorrectAnswer>\r\n                    {question.correct_answer}\r\n                </styled.CorrectAnswer>\r\n            </styled.AnswerContainer>\r\n            )}\r\n        </styled.Summary>\r\n    )\r\n};\r\n\r\nexport default Summary;","import React, { useState } from 'react';\r\nimport * as styled from './styles';\r\nimport Question from '../../components/Question/Question';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport NavBar from \"../../components/NavBar/NavBar\";\r\nimport Button from '../../components/UI/Button/Button';\r\nimport { AppState } from '../../index';\r\nimport Summary from \"~/components/Question/Summary/Summary\";\r\nimport { Question as IQuiestion } from \"~/store/reducers/quiz\";\r\n\r\ninterface QuizProps {\r\n}\r\n\r\ninterface StateProps {\r\n    questions: IQuiestion[],\r\n    quizStarted: boolean,\r\n    dataLoading: boolean,\r\n    isDataAvailable: boolean,\r\n}\r\n\r\ninterface DispatchProps {\r\n    end: () => void,\r\n    initQuiz: () => void,\r\n}\r\n\r\ntype Props = QuizProps & StateProps & DispatchProps;\r\n\r\nconst Quiz: React.FC<Props> = props => {\r\n    const [finished, setFinished] = useState(false);\r\n    const [questionNumber, setQuestionNumber] = useState(1);\r\n    const [correctAnswers, setCorrectAnswers] = useState<boolean[]>([]);\r\n    const questionId = questionNumber - 1;\r\n    const [selectedId, setSelectedId] = useState(-1);\r\n    const question = props.questions[questionId];\r\n\r\n    let answers: string[] = [];\r\n    const questionsAmount = props.questions.length;\r\n    const correctAnswerId = question?.correctAnswerId;\r\n\r\n    const [inRevealMode, setInRevealMode] = useState(false);\r\n    const buttonLabel = finished ? 'Try Again!' : inRevealMode ? \"Next\" : \"Check\";\r\n    const loading = !(props.quizStarted || finished) || props.dataLoading;\r\n\r\n    if(!props.isDataAvailable) {\r\n        return <Redirect to=\"/\" />\r\n    };\r\n\r\n    if (question) {\r\n        answers = [...question.incorrect_answers];\r\n        answers.splice(correctAnswerId, 0, question.correct_answer);\r\n    }\r\n\r\n    const resetSettings = () => {\r\n        setQuestionNumber(1);\r\n        setCorrectAnswers([]);\r\n        setFinished(false);\r\n        setInRevealMode(false)\r\n        props.initQuiz();\r\n    }\r\n\r\n    const handleButtonClick = () => {\r\n        if (finished) {\r\n            resetSettings();\r\n        } else if (inRevealMode) {\r\n            const isLastQuestion = questionNumber === props.questions.length;\r\n            setSelectedId(-1);\r\n            setFinished(isLastQuestion);\r\n            setQuestionNumber(isLastQuestion ? questionNumber : questionNumber  + 1);\r\n            setInRevealMode(false);\r\n        } else {\r\n            const isCorrect = selectedId === correctAnswerId\r\n            setCorrectAnswers([...correctAnswers, isCorrect])\r\n            setInRevealMode(true);\r\n        };\r\n    }\r\n\r\n    const handleAnswerPicked = (selectedAnswerId: number) => {\r\n        setSelectedId(selectedAnswerId);\r\n    }\r\n\r\n    return (\r\n        <styled.Quiz>\r\n            {loading ? <Spinner /> :\r\n                !finished\r\n                    ? <Question\r\n                        question={props.questions[questionId]}\r\n                        reveal={inRevealMode}\r\n                        answers={answers}\r\n                        correctId={correctAnswerId}\r\n                        onAnswerPicked={handleAnswerPicked}\r\n                        selectedId={selectedId} />\r\n                    : <Summary questions={props.questions} correctAnswers={correctAnswers}  />}\r\n            <Button label={buttonLabel} onClick={handleButtonClick} />\r\n            <NavBar \r\n                currentQuestionNumber={questionNumber}\r\n                questionsAmount={questionsAmount}\r\n                loading={props.dataLoading}\r\n                finished={finished} />\r\n        </styled.Quiz>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ quiz, startPage }: AppState): StateProps => {\r\n    return {\r\n        questions: quiz.questions,\r\n        quizStarted: quiz.started,\r\n        dataLoading: quiz.fetching,\r\n        isDataAvailable: startPage.dataFetched,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch): DispatchProps => {\r\n    return {\r\n        end: () => dispatch(actions.quizEnded()),\r\n        initQuiz: () => dispatch(actions.initQuiz()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import React, { Component } from 'react';\nimport * as styled from './styles';\nimport Menu from './containers/Menu/Menu';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Quiz from './containers/Quiz/Quiz';\n\nclass App extends Component {\n  render() {\n    const routes = (\n      <Switch>\n        <Route path=\"/quiz\" exact component={Quiz} />\n        <Route path=\"/\" exact component={Menu} />\n        <Redirect to=\"/\" />\n      </Switch>\n    )\n    return (\n      <styled.App>\n        {routes}\n      </styled.App>\n    );\n  }\n}\nexport default App;\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nexport interface Question {\r\n    category: string,\r\n    type: (\"multiple\" | \"boolean\"),\r\n    difficulty: (\"easy\" | \"medium\" | \"hard\"),\r\n    question: string,\r\n    correct_answer: string,\r\n    incorrect_answers: string[],\r\n    correctAnswerId: number,\r\n}\r\n\r\nexport interface QuizState {\r\n    started: boolean,\r\n    fetching: boolean,\r\n    questions: Question[],\r\n};\r\n\r\nconst initialState: QuizState = {\r\n    started: false,\r\n    fetching: true,\r\n    questions: [],\r\n}\r\n\r\nconst shuffleAnswers = (state: QuizState, action: actionTypes.shuffleAnswers): QuizState => {\r\n    const { questions } = state;\r\n    const questionsWithAnswerId: Question[] = [...questions];\r\n    questions.forEach((question,i) => {\r\n        let correctAnswerId = -1;\r\n        const answersAmmount = question.incorrect_answers.length + 1;\r\n        const isBoolType = answersAmmount === 2;\r\n        if (isBoolType) {\r\n            correctAnswerId = question.correct_answer === \"True\" ? 0 : 1;\r\n        } else {\r\n            correctAnswerId = Math.floor(Math.random() * answersAmmount);\r\n        }\r\n        questionsWithAnswerId[i].correctAnswerId = correctAnswerId;\r\n    });\r\n    return { ...state, questions: questionsWithAnswerId  }\r\n}\r\n\r\nconst fetchQuestionsStart = (state: QuizState, action: actionTypes.fetchQuestionsStart): QuizState => {\r\n    return { ...state, fetching: true };\r\n}\r\n\r\nconst fetchQuestionsSuccess = (state: QuizState, action: actionTypes.fetchQuestionsSuccess): QuizState => {\r\n    return { ...state, questions: action.questions, fetching: false };\r\n}\r\n\r\nconst fetchQuestionsFail = (state: QuizState, action: actionTypes.fetchQuestionsFail<any>): QuizState => {\r\n    console.log(action.error)\r\n    return { ...state, fetching: false };\r\n}\r\n\r\nconst quizStarted = (state: QuizState, action: actionTypes.quizStarted): QuizState => {\r\n    return { ...state, started: true }\r\n}\r\n\r\nconst quizEnded = (state: QuizState, action: actionTypes.endQuiz): QuizState => {\r\n    return { ...state, started: false }\r\n}\r\n\r\nconst quizQuit = (state: QuizState, action: actionTypes.quizQuit): QuizState => {\r\n    return { ...state, started: false}\r\n}\r\n\r\nconst reset = (state: QuizState, action: actionTypes.resetQuiz): QuizState => {\r\n    return initialState;\r\n}\r\n\r\nconst reducer = (state = initialState, action: actionTypes.AllActions): QuizState => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_QUESTIONS_START: return fetchQuestionsStart(state, action);\r\n        case actionTypes.FETCH_QUESTIONS_SUCCESS: return fetchQuestionsSuccess(state, action);\r\n        case actionTypes.FETCH_QUESTIONS_FAIL: return fetchQuestionsFail(state, action);\r\n        case actionTypes.QUIZ_STARTED: return quizStarted(state, action);\r\n        case actionTypes.SHUFFLE_ANSWERS: return shuffleAnswers(state, action);\r\n        case actionTypes.QUIZ_ENDED: return quizEnded(state, action);\r\n        case actionTypes.QUIZ_QUIT: return quizQuit(state, action);\r\n        case actionTypes.RESET_QUIZ: return reset(state, action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nexport interface Category {\r\n    name: string, \r\n    id: number\r\n};\r\n\r\nexport interface ISetting<T> {\r\n    values: T[],\r\n    selected: T,\r\n}\r\n\r\nexport interface ISettings {\r\n    amount: ISetting<string>,\r\n    category: ISetting<Category>,\r\n    difficulty: ISetting<string>,\r\n    type: ISetting<string>,\r\n    apiURL: string,\r\n}\r\n\r\nexport interface StartPageState {\r\n    loading: boolean,\r\n    dataFetched: boolean,\r\n    settings: ISettings,\r\n}\r\n\r\nconst initialState: StartPageState = {\r\n    loading: false,\r\n    dataFetched: false,\r\n    settings: {\r\n        amount: {\r\n            values: [\"5\", \"10\", \"15\", \"20\", \"50\"],\r\n            selected: \"5\",\r\n        },\r\n        category: {\r\n            values: [{ name: 'Any Category', id: 0 }], // categories should be fetched from https://opentdb.com/api_category.php\r\n            selected: { name: 'Any Category', id: 0 },\r\n        },\r\n        difficulty: {\r\n            values: ['Easy', 'Medium', 'Hard', 'Any'],\r\n            selected: 'Any',\r\n        },\r\n        type: {\r\n            values: ['ABCD', 'True/False', 'Any'],\r\n            selected: 'Any',\r\n        },\r\n        apiURL: \"https://opentdb.com/api.php?amount=5&category=0&type=0&dificulty=0\",\r\n    }\r\n}\r\n\r\nconst fetchCategoriesStart = (state: StartPageState, action: actionTypes.fetchCategoriesStart): StartPageState => {\r\n    return { ...state, loading: true }\r\n}\r\n\r\nconst fetchCategoriesSuccess = (state: StartPageState, action: actionTypes.fetchCategoriesSuccess): StartPageState => {\r\n    const settings = {\r\n            ...state.settings,\r\n            category: {\r\n                ...state.settings.category,\r\n                values: [{name: 'Any Category',id: 0}].concat(action.categories),\r\n            }\r\n        }\r\n    return { ...state, loading: false, settings, dataFetched: true };\r\n}\r\n\r\nconst fetchCategoriesFail = (state: StartPageState, action: actionTypes.fetchCategoriesFail<{}>): StartPageState => {\r\n    console.log(\"Something went wrong\");\r\n    console.log(action.error);\r\n    return { ...state, loading: false }\r\n}\r\n\r\nconst setQuestionAmount = (state: StartPageState, action: actionTypes.setQuestionAmount): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        amount: {\r\n            ...state.settings.amount,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst setQuestionCategory = (state: StartPageState, action: actionTypes.setQuestionCategory): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        category: {\r\n            ...state.settings.category,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst setQuestionType = (state: StartPageState, action: actionTypes.setQuestionType): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        type: {\r\n            ...state.settings.type,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst setQuestionDifficulty = (state: StartPageState, action: actionTypes.setQuestionDifficulty): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        difficulty: {\r\n            ...state.settings.difficulty,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst resetStartPage = (state: StartPageState, action: actionTypes.resetStartPage): StartPageState => {\r\n    return initialState;\r\n}\r\n\r\nconst generateUrl = (state: StartPageState, action: actionTypes.generateURL): StartPageState => {\r\n    const { category, amount, difficulty, type } = state.settings;\r\n    const categoryID = category.values.filter(currCategory => currCategory.name === category.selected.name)[0].id;\r\n    const questionsAmount = amount.selected;\r\n    const selectedDifficulty = [\"easy\", \"medium\", \"hard\", \"0\"][difficulty.values.indexOf(difficulty.selected)];\r\n    const selectedType = [\"multiple\",\"boolean\",\"0\"][type.values.indexOf(type.selected)];\r\n    const apiURL = `https://opentdb.com/api.php?amount=${questionsAmount}&category=${categoryID}&type=${selectedType}&dificulty=${selectedDifficulty}`;\r\n    return {...state, settings: {...state.settings, apiURL: apiURL}};\r\n}\r\n\r\nconst reducer = (state = initialState, action: actionTypes.StartPageActions): StartPageState => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_CATEGORIES_START: return fetchCategoriesStart(state, action);\r\n        case actionTypes.FETCH_CATEGORIES_SUCCESS: return fetchCategoriesSuccess(state, action);\r\n        case actionTypes.FETCH_CATEGORIES_FAIL: return fetchCategoriesFail(state, action);\r\n        case actionTypes.SET_QUESTION_AMOUNT: return setQuestionAmount(state, action);\r\n        case actionTypes.SET_QUESTION_CATEGORY: return setQuestionCategory(state, action);\r\n        case actionTypes.SET_QUESTION_TYPE: return setQuestionType(state, action);\r\n        case actionTypes.SET_QUESTION_DIFFICULTY: return setQuestionDifficulty(state, action);\r\n        case actionTypes.GENERATE_URL: return generateUrl(state,action);\r\n        case actionTypes.RESET_START_PAGE: return resetStartPage(state,action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware, compose, combineReducers} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport quizReducer from './store/reducers/quiz';\nimport startPageReducer from './store/reducers/startPage';\n\ndeclare global {\n    interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\n    }\n}\n\nconst composeEnhancers = process.env.NODE_ENV ==='development' \n? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ \n: null || compose;\n\nconst rootReducer = combineReducers({\n    quiz: quizReducer,\n    startPage: startPageReducer,\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\nexport type AppState = ReturnType<typeof rootReducer>"],"sourceRoot":""}