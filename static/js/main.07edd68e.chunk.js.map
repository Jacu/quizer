{"version":3,"sources":["webpack:///./src/index.css?552e","index.css","styles.ts","containers/Menu/styles.ts","components/Menu/Input/styles.ts","components/Menu/Input/Input.tsx","store/actions/quiz.ts","store/actions/actionTypes.ts","store/actions/startPage.ts","components/UI/Spinner/styles.ts","components/UI/Spinner/Spinner.tsx","containers/Menu/Menu.tsx","containers/Quiz/styles.ts","components/Question/styles.ts","components/Question/Answer/styles.ts","utils/Colors/index.ts","components/Question/Answer/Answer.tsx","components/Question/Question.tsx","components/NavBar/styles.ts","components/NavBar/NavBar.tsx","components/UI/Button/styles.ts","components/UI/Button/Button.tsx","components/Question/Summary/styles.ts","components/Question/Summary/Summary.tsx","containers/Quiz/Quiz.tsx","App.tsx","store/reducers/quiz.ts","store/reducers/startPage.ts","index.tsx"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","locals","exports","push","root","App","styled","div","_templateObject","StartPage","styles_templateObject","Menu","_templateObject2","settingInputs","_templateObject3","quizerIntro","keyframes","_templateObject4","Title","h1","_templateObject5","SubTitle","_templateObject6","Button","Link","_templateObject7","Input","Input_styles_templateObject","Select","select","styles_templateObject2","Option","option","styles_templateObject3","Label","styles_templateObject4","props","react_default","a","createElement","styles_Input","label","onChange","event","name","target","value","map","key","initQuiz","dispatch","getState","apiURL","startPage","settings","reset","fetchQuestionsStart","axios","get","then","response","fetchQuestionsSuccess","data","results","shuffleAnswers","quizStarted","catch","err","fetchQuestionsFail","type","questions","error","endQuiz","fetchCategoriesStart","fetchCategoriesSuccess","trivia_categories","categories","fetchCategoriesFail","lds_dual_ring","Spinner_styles_templateObject","Spinner","Spinner_styles_templateObject2","styles_Spinner","connect","_ref2","available","loading","init","generateURL","actions","changeSetting","setting","_ref","useEffect","styles_StartPage","UI_Spinner_Spinner","Menu_Input_Input","amount","category","obj","difficulty","styles_Button","to","onClick","Quiz","Quiz_styles_templateObject","StyleState","QuestionComponent","Question_styles_templateObject","Question","Question_styles_templateObject2","h3","Question_styles_templateObject3","CategoryLabel","p","Question_styles_templateObject4","AnswersContainer","styles_templateObject5","correct","wrong","gray","isSelected","showAnswer","isCorrect","CorrectSelected","IncorrectSelected","Selected","CorrectNotSelected","Notselected","answerBackgroundColor","_answerBackgroundColo","Object","defineProperty","colors","answerBorderColor","_answerBorderColor","Answer","Answer_styles_templateObject","checkboxBorderColor","_checkboxBorderColor","checkboxBorderWidth","_checkboxBorderWidth","Checkbox","Answer_styles_templateObject2","answer","reveal","styles_Answer","question","answers","correctId","onAnswerPicked","selectedId","categoryLabel","concat","styles_Question","unescape","Question_Answer_Answer","NavBar","NavBar_styles_templateObject","Icon","FontAwesomeIcon","NavBar_styles_templateObject2","QuestionCounter","NavBar_styles_templateObject3","ButtonContainer","NavBar_styles_templateObject4","quiz","quit","currentQuestionNumber","questionsAmount","counterLabel","finished","styles_NavBar","react_router_dom","icon","faHome","Button_styles_templateObject","Button_styles_Button","children","Summary","Summary_styles_templateObject","AnswerContainer","Summary_styles_templateObject2","Summary_styles_templateObject3","CorrectAnswer","Summary_styles_templateObject4","correctAnswers","styles_Summary","questionId","Summary_styles_Question","correct_answer","started","dataLoading","fetching","isDataAvailable","dataFetched","end","_useState","useState","_useState2","slicedToArray","setFinished","_useState3","_useState4","questionNumber","setQuestionNumber","_useState5","_useState6","setCorrectAnswers","_useState7","_useState8","setSelectedId","length","correctAnswerId","_useState9","_useState10","inRevealMode","setInRevealMode","buttonLabel","react_router","toConsumableArray","incorrect_answers","splice","styles_Quiz","Question_Summary_Summary","components_Question_Question","selectedAnswerId","UI_Button_Button","components_NavBar_NavBar","routes","path","exact","component","styles_App","Component","initialState","reducer","state","arguments","action","objectSpread","console","log","questionsWithAnswerId","forEach","answersAmmount","Math","floor","random","quizQuit","id","selected","settingsWithCategories","newSelectedSetting","setSetting","categoryID","find","indexOf","generateUrl","composeEnhancers","compose","rootReducer","combineReducers","quizReducer","startPageReducer","store","createStore","applyMiddleware","thunk","app","es","src_App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07edd68e.chunk.js","sourcesContent":["\nvar content = require(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"* {\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  \\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Roboto\\\", \\\"Oxygen\\\",\\n    \\\"Ubuntu\\\", \\\"Cantarell\\\", \\\"Fira Sans\\\", \\\"Droid Sans\\\", \\\"Helvetica Neue\\\",\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\n#_1YYU_vdtEoCzbtmk8tBvTU {\\n  position: absolute;\\n  height: 100%;\\n  width: 100%;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \\\"Courier New\\\",\\n    monospace;\\n}\\n\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"root\": \"_1YYU_vdtEoCzbtmk8tBvTU\"\n};","import styled from 'styled-components';\r\n\r\nexport const App = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    padding: 0;  \r\n    text-align: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n    position: absolute;\r\n    \r\n    font-family: 'Roboto', sans-serif;\r\n    font-weight: 400;\r\n  \r\n    color: #02283B;\r\n    color: #125271;\r\n\r\n    background: white;\r\n`;","import styled, { keyframes } from \"styled-components\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const StartPage = styled.div`\r\n    position: absolute;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    align-self: center;\r\n    height: 50%;\r\n    width: 100%;\r\n`;\r\n\r\nexport const Menu = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nexport const settingInputs = styled.div`\r\n    margin: 50px 0;\r\n    display: flex;    \r\n    width: 100%;\r\n`;\r\n\r\nconst quizerIntro = keyframes`\r\n    0% {\r\n        transform: scale(0, 0) rotate(0deg);\r\n    }\r\n    60% {\r\n        transform: scale(1.25, 1.25) rotate(360deg) skew(-15deg);\r\n    }\r\n    100% {\r\n        transform: scale(1.15, 1.25) rotate(355deg) skew(-10deg);\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    margin: 20px 0;\r\n    font-size: 6rem;\r\n    animation: ${quizerIntro} 0.4s 0.5s ease-out forwards;\r\n    background: none;\r\n    color: #125271;\r\n    transform: scale(0, 0);\r\n`;\r\n\r\nexport const SubTitle = styled.div`\r\n    color: #B3D8E9;\r\n    color: #5B99B7;\r\n`;\r\n\r\nexport const Button = styled(Link)`\r\n    color: inherit;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n    background: white;\r\n    padding: 20px 50px;    \r\n    border-radius: 25px;\r\n    font-weight: bold;\r\n    font-size: 2rem;\r\n    box-shadow: 1px 1px 0px 3px rgba(0, 0, 0, 0.5);\r\n    transition: transform 0.25s;\r\n    margin: 2rem;\r\n    :hover {\r\n        transform: scale(1.2,1.2);    \r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nexport const  Input = styled.div`\r\n    flex: 1;\r\n`;\r\n\r\nexport const Select = styled.select`\r\n    cursor: pointer;\r\n    width: 80%;\r\n    text-align: center;\r\n    color:inherit;\r\n    border-radius: 5px;\r\n    :focus{\r\n        outline: 0;\r\n    }\r\n`;\r\n\r\nexport const Option = styled.option`\r\n    text-align: center;\r\n`\r\n\r\nexport const Label = styled.div`\r\n`","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface InputProps {\r\n    label: string,\r\n    name: string,\r\n    options: [],\r\n    onChange: (setting: string, value: string) => void,\r\n}\r\n\r\nconst Input: React.FC<InputProps> = props => {\r\n    const handleChange = (event: React.ChangeEvent<HTMLSelectElement> ) => {\r\n        props.onChange(props.name, event.target.value)\r\n    };\r\n\r\n    return (\r\n    <styled.Input>\r\n        <styled.Label>{props.label}</styled.Label>\r\n        <styled.Select onChange={handleChange}>\r\n            {props.options.map(option =>\r\n                <styled.Option\r\n                    key={option}\r\n                    value={option}>\r\n                    {option}\r\n                </styled.Option>)}\r\n        </styled.Select>\r\n    </styled.Input>\r\n)}\r\n\r\nexport default Input;","import * as actionTypes from './actionTypes';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { Dispatch } from 'react';\r\nimport { Question } from '../reducers/quiz';\r\nimport { AppState } from \"~/index\"; \r\n\r\ninterface CategoriesServerData {\r\n    results: Question[];\r\n};\r\n\r\nexport const initQuiz = () => {\r\n    return (dispatch: Dispatch<actionTypes.AllActions>, getState: () => AppState ) => {\r\n        const apiURL = getState().startPage.settings.apiURL;\r\n        dispatch(reset());\r\n        dispatch(fetchQuestionsStart());\r\n        axios.get(apiURL)\r\n            .then((response: AxiosResponse<CategoriesServerData>) => {\r\n                dispatch(fetchQuestionsSuccess(response.data.results));                \r\n            })\r\n            .then( () => {\r\n                dispatch(shuffleAnswers());\r\n                dispatch(quizStarted())\r\n            })\r\n            .catch((err: AxiosError) => {                \r\n                dispatch(fetchQuestionsFail(err))\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsStart = (): actionTypes.fetchQuestionsStart => {\r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_START,\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsSuccess = (data: Question[]): actionTypes.fetchQuestionsSuccess => {    \r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_SUCCESS,\r\n        questions: data,\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsFail = (error: AxiosError): actionTypes.fetchQuestionsFail<AxiosError> => {\r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_FAIL,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const shuffleAnswers = (): actionTypes.shuffleAnswers => {\r\n    return {\r\n        type: actionTypes.SHUFFLE_ANSWERS,\r\n    }\r\n}\r\n\r\nexport const quizStarted = (): actionTypes.quizStarted => {\r\n    return {\r\n        type: actionTypes.QUIZ_STARTED,\r\n    }\r\n}\r\n\r\nexport const quizEnded = (): Dispatch<Dispatch<actionTypes.QuizActions>> => {\r\n    return (dispatch: Dispatch<actionTypes.QuizActions>) => {\r\n        dispatch(endQuiz());        \r\n    }\r\n}\r\n\r\nexport const quizQuit = (): actionTypes.quizQuit  => {\r\n    return {\r\n        type: actionTypes.QUIZ_QUIT,      \r\n    }\r\n}\r\n\r\nexport const endQuiz = (): actionTypes.endQuiz => {\r\n    return {\r\n        type: actionTypes.QUIZ_ENDED,\r\n    }\r\n}\r\n\r\nexport const reset = (): actionTypes.resetQuiz => {\r\n    return {\r\n        type: actionTypes.RESET_QUIZ,\r\n    }\r\n}","import { Category } from \"../reducers/startPage\";\r\nimport { Question } from \"../reducers/quiz\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const INIT = 'INIT';\r\n\r\nexport const FETCH_CATEGORIES_START = 'FETCH_CATEGORIES_START';\r\nexport const FETCH_CATEGORIES_SUCCESS = 'FETCH_CATEGORIES_SUCCESS';\r\nexport const FETCH_CATEGORIES_FAIL = 'FETCH_CATEGORIES_FAIL';\r\n\r\nexport const SET_SETTING = 'SET_SETTING';\r\n\r\nexport const GENERATE_URL = 'GENERATE_URL';\r\n\r\nexport const RESET_START_PAGE = 'RESET_START_PAGE';\r\n\r\n// ----------------------------\r\n\r\nexport const QUIZ_STARTED = 'QUIZ_STARTED';\r\n\r\nexport const FETCH_QUESTIONS_START = 'FETCH_QUESTIONS_START';\r\nexport const FETCH_QUESTIONS_SUCCESS = 'FETCH_QUESTIONS_SUCCESS';\r\nexport const FETCH_QUESTIONS_FAIL = 'FETCH_QUESTIONS_FAIL';\r\n\r\nexport const SHUFFLE_ANSWERS = 'SHUFFLE_ANSWERS';\r\n\r\nexport const QUIZ_ENDED = 'QUIZ_ENDED';\r\nexport const QUIZ_QUIT = 'QUIZ_QUIT';\r\n\r\nexport const RESET_QUIZ = \"RESET_QUIZ\";\r\n\r\n// ----------------------------\r\n\r\nexport interface fetchQuestionsStart {\r\n    type: typeof FETCH_QUESTIONS_START,\r\n}\r\n\r\nexport interface fetchQuestionsSuccess {\r\n    type: typeof FETCH_QUESTIONS_SUCCESS,\r\n    questions: Question[],\r\n}\r\n\r\nexport interface fetchQuestionsFail<T> {\r\n    type: typeof FETCH_QUESTIONS_FAIL,\r\n    error: T,\r\n}\r\n\r\nexport interface shuffleAnswers {\r\n    type: typeof SHUFFLE_ANSWERS,\r\n}\r\n\r\nexport interface quizStarted {\r\n    type: typeof QUIZ_STARTED,\r\n}\r\n\r\nexport interface endQuiz {\r\n    type: typeof QUIZ_ENDED,\r\n}\r\n\r\nexport interface quizQuit {\r\n    type: typeof QUIZ_QUIT,\r\n}\r\n\r\nexport interface resetQuiz {\r\n    type: typeof RESET_QUIZ,\r\n}\r\n\r\nexport type QuizActions = fetchQuestionsStart | fetchQuestionsSuccess | fetchQuestionsFail<any> | shuffleAnswers |\r\nquizStarted |  endQuiz | quizQuit | resetQuiz;\r\n\r\n// ----------------------------\r\n\r\nexport interface init extends Dispatch { }\r\n\r\nexport interface fetchCategoriesStart {\r\n    type: typeof FETCH_CATEGORIES_START,\r\n}\r\n\r\nexport interface fetchCategoriesSuccess {\r\n    type: typeof FETCH_CATEGORIES_SUCCESS,\r\n    categories: Category[],\r\n}\r\n\r\nexport interface fetchCategoriesFail<T> {\r\n    type: typeof FETCH_CATEGORIES_FAIL,\r\n    error: T,\r\n}\r\n\r\nexport interface setSetting {\r\n    type: typeof SET_SETTING,\r\n    setting: string,\r\n    value: string,\r\n}\r\n\r\nexport interface generateURL {\r\n    type: typeof GENERATE_URL,\r\n}\r\n\r\nexport interface resetStartPage {\r\n    type: typeof RESET_START_PAGE,\r\n}\r\n\r\nexport type StartPageActions = fetchCategoriesStart | fetchCategoriesSuccess | fetchCategoriesFail<any> | setSetting | generateURL | resetStartPage;\r\n\r\n\r\nexport type AllActions = QuizActions | StartPageActions;","import { Category } from '../reducers/startPage';\r\nimport * as actionTypes from './actionTypes';\r\nimport axios, { AxiosResponse, AxiosError } from 'axios';\r\nimport { Dispatch } from 'redux';\r\n\r\ninterface CategoriesServerData {\r\n    trivia_categories: Category[];\r\n}\r\n\r\nexport const init = () => {\r\n    return (dispatch: Dispatch<actionTypes.StartPageActions>) => {\r\n        dispatch(reset());\r\n        dispatch(fetchCategoriesStart());\r\n        axios.get('https://opentdb.com/api_category.php')\r\n            .then((response: AxiosResponse<CategoriesServerData>) => {\r\n                dispatch(fetchCategoriesSuccess(response.data.trivia_categories))\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(fetchCategoriesFail(err))\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesStart = (): actionTypes.fetchCategoriesStart => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_START,\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesSuccess = (trivia_categories: Category[]): actionTypes.fetchCategoriesSuccess => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_SUCCESS,\r\n        categories: trivia_categories,\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesFail = (error: AxiosError): actionTypes.fetchCategoriesFail<AxiosError> => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_FAIL,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const setSetting = (setting: string, value: string): actionTypes.setSetting => {\r\n    return {\r\n        type: actionTypes.SET_SETTING,\r\n        setting: setting,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const generateURL = (): actionTypes.generateURL => {\r\n    return {\r\n        type: actionTypes.GENERATE_URL,\r\n    }\r\n}\r\n\r\nconst reset = (): actionTypes.resetStartPage => {\r\n    return {\r\n        type: actionTypes.RESET_START_PAGE,\r\n    }\r\n}","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst lds_dual_ring = keyframes`\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n  display: flex;\r\n  width: 64px;\r\n  height: 64px;\r\n  margin: 36px auto;\r\n  \r\n  :after {\r\n    content: \" \";\r\n    display: block;\r\n    width: 46px;\r\n    height: 46px;\r\n    margin: 1px;\r\n    border-radius: 50%;\r\n    border: 5px solid #125271;\r\n    border-color: #125271 transparent #125271 transparent;\r\n    animation: ${lds_dual_ring} 1.2s linear infinite;\r\n  }\r\n`;","import React from 'react';\r\nimport * as styled from './styles'\r\n\r\nconst Spinner = () => <styled.Spinner/>\r\n\r\nexport default Spinner;","import React, { useEffect } from 'react';\r\nimport * as styled from './styles';\r\nimport { connect } from 'react-redux';\r\nimport Input from '../../components/Menu/Input/Input';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { AppState } from \"~/index\";\r\n\r\ninterface StartPageProps {\r\n}\r\n\r\ninterface StateProps {\r\n    settings: any, //TODO\r\n    loading: boolean,\r\n    apiURL: string,\r\n}\r\n\r\ninterface DispatchProps {\r\n    init: () => void,\r\n    generateURL: () => void,\r\n    initQuiz: () => void,\r\n    changeSetting: (setting: string, value: string) => void,\r\n}\r\n\r\ntype Props = StartPageProps & StateProps & DispatchProps;\r\n\r\nconst StartPage: React.FC<Props> = ({ init, settings, loading, changeSetting, generateURL, initQuiz }) => {\r\n        useEffect(() => {\r\n            init();\r\n        }, [init]);\r\n\r\n    const handleStartButtonClick = () => {\r\n        generateURL();\r\n        initQuiz();\r\n    }\r\n\r\n    return (\r\n        <styled.StartPage>\r\n            <styled.Menu>\r\n                <styled.Title>Quizer</styled.Title>\r\n                <styled.SubTitle>\r\n                    <p>Quiz generator with use of Trivia API opentdb.com</p>\r\n                    <p>created by Jacek Smetek</p>\r\n                </styled.SubTitle>\r\n                {loading === true ? <Spinner /> : (\r\n                    <styled.settingInputs>\r\n                        <Input name=\"amount\" label=\"Question count\" options={settings.amount} onChange={changeSetting} />\r\n                        <Input name=\"category\" label=\"Category\" options={settings.category.map(obj => obj.name)} onChange={changeSetting} />\r\n                        <Input name=\"type\" label=\"Type\" options={settings.type} onChange={changeSetting} />\r\n                        <Input name=\"difficulty\" label=\"Dificulity\" options={settings.difficulty} onChange={changeSetting} />\r\n                    </styled.settingInputs>\r\n                )}\r\n            </styled.Menu>\r\n            {!loading ? <styled.Button to=\"/quiz\" onClick={handleStartButtonClick}> Start </styled.Button> : null}\r\n        </styled.StartPage>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ startPage }: AppState): StateProps => {\r\n    return {\r\n        settings: startPage.settings.available,\r\n        loading: startPage.loading,\r\n        apiURL: startPage.settings.apiURL,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch): DispatchProps => {\r\n    return {\r\n        init: () => dispatch(actions.init()),\r\n        generateURL: () => dispatch(actions.generateURL()),\r\n        initQuiz: () => dispatch(actions.initQuiz()),\r\n        changeSetting: (setting, value) => dispatch(actions.setSetting(setting, value)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StartPage);","import styled from \"styled-components\";\r\n\r\nexport const Quiz = styled.div`\r\n    align-self: center;\r\n    width: 80%;\r\n    max-width: 700px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const QuestionComponent = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n`;\r\n\r\nexport const QuestionHeader = styled.div`\r\n   display: flex;\r\n`;\r\n\r\nexport const Question = styled.h3`\r\n    display: flex;\r\n    margin: 15px 0;\r\n`;\r\n\r\nexport const CategoryLabel = styled.p` \r\n    font-style: italic;\r\n    display: flex;\r\n`;\r\n\r\nexport const AnswersContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;","import styled from 'styled-components';\r\nimport * as colors from '~/utils/Colors';\r\n\r\ninterface AnswerProps {\r\n    isSelected: boolean,\r\n    showAnswer: boolean,\r\n    isCorrect: boolean,\r\n}\r\n\r\nenum StyleState { CorrectSelected, IncorrectSelected, Selected, CorrectNotSelected, Notselected }\r\n\r\nconst getState = (props: AnswerProps): StyleState => {\r\n    const { isSelected, showAnswer, isCorrect} = props;\r\n    return isSelected \r\n        ? showAnswer\r\n            ? isCorrect \r\n                ? StyleState.CorrectSelected \r\n                : StyleState.IncorrectSelected\r\n            : StyleState.Selected\r\n        : showAnswer && isCorrect \r\n            ? StyleState.CorrectNotSelected\r\n            : StyleState.Notselected\r\n};\r\n\r\nconst answerBackgroundColor = {\r\n    [StyleState.CorrectSelected]: colors.correct.light,\r\n    [StyleState.IncorrectSelected]: colors.wrong.light,\r\n    [StyleState.Selected]: 'transparent',\r\n    [StyleState.CorrectNotSelected]: colors.correct.light,\r\n    [StyleState.Notselected]: 'transparent',\r\n}\r\n\r\nconst answerBorderColor = {\r\n    [StyleState.CorrectSelected]: colors.correct.base,\r\n    [StyleState.IncorrectSelected]: colors.wrong.base,\r\n    [StyleState.Selected]: colors.gray.base,\r\n    [StyleState.CorrectNotSelected]: colors.gray.base,\r\n    [StyleState.Notselected]: colors.gray.base,\r\n}\r\n\r\nexport const Answer = styled.div<AnswerProps>`\r\n    display: flex;\r\n    width: 100%;\r\n    padding: 15px 0;\r\n    cursor: pointer;\r\n    background-color: ${props => answerBackgroundColor[getState(props)]};\r\n    :hover {\r\n        background: ${colors.gray.light};\r\n    }\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: ${props => answerBorderColor[getState(props)]};\r\n    margin: 5px 0;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst checkboxBorderColor = {\r\n    [StyleState.CorrectSelected]: colors.correct.base,\r\n    [StyleState.IncorrectSelected]: colors.wrong.base,\r\n    [StyleState.Selected]: colors.primaryTheme.base,\r\n    [StyleState.CorrectNotSelected]: colors.correct.base,\r\n    [StyleState.Notselected]: colors.gray.base,\r\n}\r\n\r\nconst checkboxBorderWidth = {\r\n    [StyleState.CorrectSelected]: '10px',\r\n    [StyleState.IncorrectSelected]: '6px',\r\n    [StyleState.Selected]: '6px',\r\n    [StyleState.CorrectNotSelected]: '10px',\r\n    [StyleState.Notselected]: '1px',\r\n}\r\n\r\nexport const Checkbox = styled.div<AnswerProps>`\r\n    width: 20px;\r\n    height: 20px;\r\n    border-width: ${props => checkboxBorderWidth[getState(props)]};\r\n    border-style: solid;\r\n    border-color: ${props => checkboxBorderColor[getState(props)]};\r\n    margin: 0 10px;\r\n    border-radius: 50%;\r\n`;","export const primaryTheme = {\r\n    base: '#19729F',\r\n};\r\nexport const secondaryTheme = {\r\n    base: '#19729F',\r\n};\r\n\r\nexport const correct = {\r\n    base: '#46C28E',\r\n    light: '#E9F7F1',\r\n    //dark: '', // TODO\r\n}\r\n\r\nexport const wrong = {\r\n    base: '#EC5252',\r\n    light: '#FAEBEB',\r\n    //dark: '', // TODO\r\n}\r\n\r\nexport const gray = {\r\n    base: '#D3D3D3',\r\n    light: '#F2F2F2',\r\n}","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface AnswerProps {\r\n    answer: string,\r\n    isSelected: boolean,\r\n    isCorrect: boolean,\r\n    reveal: boolean,\r\n    onClick: () => void,\r\n}\r\n\r\nconst Answer: React.FC<AnswerProps> = ({isSelected, onClick, answer, isCorrect, reveal}) => \r\n    <styled.Answer \r\n        isSelected={isSelected}\r\n        isCorrect={isCorrect}\r\n        showAnswer={reveal} \r\n        onClick={!reveal ? onClick : undefined} >\r\n        <styled.Checkbox showAnswer={reveal} isCorrect={isCorrect} isSelected={isSelected} />\r\n        {answer} \r\n    </styled.Answer>\r\n\r\nexport default Answer;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Answer from './Answer/Answer';\r\nimport { Question as IQuiestion } from \"~/store/reducers/quiz\";\r\nimport unescape from '@favware/unescape';\r\n\r\ninterface QuestionProps {\r\n    question: IQuiestion,\r\n    answers: string[],\r\n    correctId: number,\r\n    reveal: boolean,\r\n    selectedId: number,\r\n    onAnswerPicked: (answerId: number) => void,\r\n}\r\n\r\nconst Question: React.FunctionComponent<QuestionProps> = ({ question, answers, correctId, reveal, onAnswerPicked, selectedId }) => {\r\n    const categoryLabel = `Category: ${question.category}`;\r\n\r\n    return (\r\n        <styled.QuestionComponent>\r\n            <styled.CategoryLabel>{categoryLabel}</styled.CategoryLabel>\r\n            <styled.Question>{unescape(question.question)}</styled.Question>\r\n            <styled.AnswersContainer>\r\n                {answers.map((answer, i) => (\r\n                    <Answer\r\n                        key={i}\r\n                        answer={unescape(answer)}\r\n                        isSelected={selectedId === i}\r\n                        isCorrect={correctId === i}\r\n                        reveal={reveal}\r\n                        onClick={() => onAnswerPicked(i)} />\r\n                ))}\r\n            </styled.AnswersContainer>\r\n        </styled.QuestionComponent>\r\n    );\r\n};\r\n\r\nexport default Question;","import styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport const NavBar = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: fixed;\r\n    text-align: left;\r\n    background: #F2F2F2;\r\n    width: 100%;\r\n    bottom: 0;\r\n    padding: 0 15px;\r\n`;\r\n\r\nexport const Icon = styled(FontAwesomeIcon)`\r\n    font-size: 2rem;\r\n    margin: 15px;\r\n    color: #125271;\r\n`;\r\n\r\nexport const QuestionCounter = styled.div`\r\n\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n\r\n`;","import React from 'react'\r\nimport * as styled from './styles'\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\nimport { AppState } from '../../index';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '~/store/actions/index';\r\n\r\ninterface DispatchProps {\r\n    quit: () => void,\r\n};\r\n\r\ninterface StateProps {\r\n\r\n};\r\n\r\ninterface NavBarProps {\r\n    currentQuestionNumber: number,\r\n    questionsAmount: number,\r\n    loading: boolean,\r\n    finished: boolean,\r\n};\r\n\r\ntype Props = DispatchProps & StateProps & NavBarProps;\r\n\r\nconst NavBar: React.FC<Props> = ({quit, currentQuestionNumber, questionsAmount, loading, finished}) => {\r\n    const counterLabel = finished ? null : loading ? 'Loading...' : `Question ${currentQuestionNumber} of ${questionsAmount}`\r\n    return (\r\n    <styled.NavBar>\r\n        <styled.QuestionCounter>{counterLabel}</styled.QuestionCounter>\r\n        <styled.ButtonContainer>\r\n            <Link to=\"/\" onClick={quit}> <styled.Icon icon={faHome}/> </Link>\r\n        </styled.ButtonContainer>\r\n    </styled.NavBar>\r\n);}\r\n\r\nconst mapStateToProps = ({ quiz, startPage }: AppState): StateProps => {\r\n    return {\r\n        // questionsAmount: quiz.questions.amount,\r\n        // quizStarted: quiz.started,\r\n        // quizFinished: quiz.finished,\r\n        // ended: quiz.finished,\r\n        // dataLoading: quiz.questions.fetching,\r\n        // isDataAvailable: startPage.dataFetched,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch ): DispatchProps => {\r\n    return {\r\n        quit: () => dispatch(actions.quizQuit()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.div`\r\n    color: white;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n    background: #EC5252;\r\n    padding: 15px 25px;\r\n    font-size: 1.25rem;\r\n    margin: 2rem;\r\n    :hover {\r\n        background: #992337;\r\n    }\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface ButtonProps {\r\n    label: string,\r\n    onClick: () => void,\r\n};\r\n\r\nconst Button: React.FC<ButtonProps> = props => {\r\n    return (\r\n        <styled.Button\r\n            children={props.label}\r\n            onClick={props.onClick} />\r\n    )\r\n}\r\n\r\nexport default Button;","import styled from 'styled-components';\r\nimport * as colors from '~/utils/Colors';\r\n\r\ninterface IAnswerContainer {\r\n    isCorrect: boolean,\r\n}\r\n\r\nexport const Summary = styled.div`\r\n`;\r\n\r\nexport const AnswerContainer = styled.div<IAnswerContainer>`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 15px 0;\r\n    margin: 5px;\r\n    background-color: ${({isCorrect}) => isCorrect ? colors.correct.light : colors.wrong.light};\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: ${({isCorrect}) => isCorrect ? colors.correct.base : colors.wrong.base };\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport const Question = styled.div`\r\n    text-align: left;\r\n    width: 80%;\r\n    padding: 0 15px;\r\n`;\r\n\r\nexport const CorrectAnswer = styled.div`\r\n    width: 20%;\r\n    text-align: left;\r\n    border-left: 1px solid lightgray;\r\n    display: flex;\r\n    padding: 0 15px;\r\n    align-items: center;\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { Question as IQuiestion } from \"~/store/reducers/quiz\";\r\n\r\ninterface SummaryProps {\r\n    questions: IQuiestion[],\r\n    correctAnswers: boolean[],\r\n}\r\n\r\ntype Props = SummaryProps;\r\n\r\nconst Summary: React.FC<Props> = ({ questions, correctAnswers }) => {\r\n\r\n    return (\r\n        <styled.Summary>\r\n            {questions.map((question, questionId) =>\r\n            <styled.AnswerContainer key={questionId} isCorrect={correctAnswers[questionId]}>\r\n                <styled.Question>\r\n                    {question.question}\r\n                </styled.Question>\r\n                <styled.CorrectAnswer>\r\n                    {question.correct_answer}\r\n                </styled.CorrectAnswer>\r\n            </styled.AnswerContainer>\r\n            )}\r\n        </styled.Summary>\r\n    )\r\n};\r\n\r\nexport default Summary;","import React, { useState } from 'react';\r\nimport * as styled from './styles';\r\nimport Question from '../../components/Question/Question';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport NavBar from \"../../components/NavBar/NavBar\";\r\nimport Button from '../../components/UI/Button/Button';\r\nimport { AppState } from '../../index';\r\nimport Summary from \"~/components/Question/Summary/Summary\";\r\nimport { Question as IQuiestion } from \"~/store/reducers/quiz\";\r\n\r\ninterface QuizProps {\r\n}\r\n\r\ninterface StateProps {\r\n    questions: IQuiestion[],\r\n    quizStarted: boolean,\r\n    dataLoading: boolean,\r\n    isDataAvailable: boolean,\r\n}\r\n\r\ninterface DispatchProps {\r\n    end: () => void,\r\n    initQuiz: () => void,\r\n}\r\n\r\ntype Props = QuizProps & StateProps & DispatchProps;\r\n\r\nconst Quiz: React.FC<Props> = props => {\r\n    const [finished, setFinished] = useState(false);\r\n    const [questionNumber, setQuestionNumber] = useState(1);\r\n    const [correctAnswers, setCorrectAnswers] = useState<boolean[]>([]);\r\n    const questionId = questionNumber - 1;\r\n    const [selectedId, setSelectedId] = useState(-1);\r\n    const question = props.questions[questionId];\r\n\r\n    let answers: string[] = [];\r\n    const questionsAmount = props.questions.length;\r\n    const correctAnswerId = question?.correctAnswerId;\r\n\r\n    const [inRevealMode, setInRevealMode] = useState(false);\r\n    const buttonLabel = finished ? 'Try Again!' : inRevealMode ? \"Next\" : \"Check\";\r\n    const loading = !(props.quizStarted || finished) || props.dataLoading;\r\n\r\n    if(!props.isDataAvailable) {\r\n        return <Redirect to=\"/\" />\r\n    };\r\n\r\n    if (question) {\r\n        answers = [...question.incorrect_answers];\r\n        answers.splice(correctAnswerId, 0, question.correct_answer);\r\n    }\r\n\r\n    const resetSettings = () => {\r\n        setQuestionNumber(1);\r\n        setCorrectAnswers([]);\r\n        setFinished(false);\r\n        setInRevealMode(false)\r\n        props.initQuiz();\r\n    }\r\n\r\n    const handleButtonClick = () => {\r\n        if (finished) {\r\n            resetSettings();\r\n        } else  \r\n        if (!inRevealMode) {\r\n            const isCorrect = selectedId === correctAnswerId\r\n            setCorrectAnswers([...correctAnswers, isCorrect])\r\n            setInRevealMode(true);\r\n        } else {\r\n            setSelectedId(-1);\r\n            const isLastQuestion = questionNumber === props.questions.length;\r\n            if (!isLastQuestion) {\r\n                setQuestionNumber(questionNumber + 1);\r\n                setInRevealMode(false);\r\n            } else {\r\n                setFinished(true);\r\n            }\r\n        };\r\n    }\r\n\r\n    const handleAnswerPicked = (selectedAnswerId: number) => {\r\n        setSelectedId(selectedAnswerId);\r\n    }\r\n\r\n    return (\r\n        <styled.Quiz>\r\n            {loading ? <Spinner /> :\r\n                !finished\r\n                    ? <Question\r\n                        question={props.questions[questionId]}\r\n                        reveal={inRevealMode}\r\n                        answers={answers}\r\n                        correctId={correctAnswerId}\r\n                        onAnswerPicked={handleAnswerPicked}\r\n                        selectedId={selectedId} />\r\n                    : <Summary questions={props.questions} correctAnswers={correctAnswers}  />}\r\n            <Button label={buttonLabel} onClick={handleButtonClick} />\r\n            <NavBar \r\n                currentQuestionNumber={questionNumber}\r\n                questionsAmount={questionsAmount}\r\n                loading={props.dataLoading}\r\n                finished={finished} />\r\n        </styled.Quiz>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ quiz, startPage }: AppState): StateProps => {\r\n    return {\r\n        questions: quiz.questions,\r\n        quizStarted: quiz.started,\r\n        dataLoading: quiz.fetching,\r\n        isDataAvailable: startPage.dataFetched,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch): DispatchProps => {\r\n    return {\r\n        end: () => dispatch(actions.quizEnded()),\r\n        initQuiz: () => dispatch(actions.initQuiz()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import React, { Component } from 'react';\nimport * as styled from './styles';\nimport Menu from './containers/Menu/Menu';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Quiz from './containers/Quiz/Quiz';\n\nclass App extends Component {\n  render() {\n    const routes = (\n      <Switch>\n        <Route path=\"/quiz\" exact component={Quiz} />\n        <Route path=\"/\" exact component={Menu} />\n        <Redirect to=\"/\" />\n      </Switch>\n    )\n    return (\n      <styled.App>\n        {routes}\n      </styled.App>\n    );\n  }\n}\nexport default App;\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nexport interface Question {\r\n    category: string,\r\n    type: (\"multiple\" | \"boolean\"),\r\n    difficulty: (\"easy\" | \"medium\" | \"hard\"),\r\n    question: string,\r\n    correct_answer: string,\r\n    incorrect_answers: string[],\r\n    correctAnswerId: number,\r\n}\r\n\r\nexport interface QuizState {\r\n    started: boolean,\r\n    fetching: boolean,\r\n    questions: Question[],\r\n};\r\n\r\nconst initialState: QuizState = {\r\n    started: false,\r\n    fetching: true,\r\n    questions: [],\r\n}\r\n\r\nconst shuffleAnswers = (state: QuizState, action: actionTypes.shuffleAnswers): QuizState => {\r\n    const { questions } = state;\r\n    const questionsWithAnswerId: Question[] = [...questions];\r\n    questions.forEach((question,i) => {\r\n        let correctAnswerId = -1;\r\n        const answersAmmount = question.incorrect_answers.length + 1;\r\n        const isBoolType = answersAmmount === 2;\r\n        if (isBoolType) {\r\n            correctAnswerId = question.correct_answer === \"True\" ? 0 : 1;\r\n        } else {\r\n            correctAnswerId = Math.floor(Math.random() * answersAmmount);\r\n        }\r\n        questionsWithAnswerId[i].correctAnswerId = correctAnswerId;\r\n    });\r\n    return { ...state, questions: questionsWithAnswerId  }\r\n}\r\n\r\nconst fetchQuestionsStart = (state: QuizState, action: actionTypes.fetchQuestionsStart): QuizState => {\r\n    return { ...state, fetching: true };\r\n}\r\n\r\nconst fetchQuestionsSuccess = (state: QuizState, action: actionTypes.fetchQuestionsSuccess): QuizState => {\r\n    return { ...state, questions: action.questions, fetching: false };\r\n}\r\n\r\nconst fetchQuestionsFail = (state: QuizState, action: actionTypes.fetchQuestionsFail<any>): QuizState => {\r\n    console.log(action.error)\r\n    return { ...state, fetching: false };\r\n}\r\n\r\nconst quizStarted = (state: QuizState, action: actionTypes.quizStarted): QuizState => {\r\n    return { ...state, started: true }\r\n}\r\n\r\nconst quizEnded = (state: QuizState, action: actionTypes.endQuiz): QuizState => {\r\n    return { ...state, started: false }\r\n}\r\n\r\nconst quizQuit = (state: QuizState, action: actionTypes.quizQuit): QuizState => {\r\n    return { ...state, started: false}\r\n}\r\n\r\nconst reset = (state: QuizState, action: actionTypes.resetQuiz): QuizState => {\r\n    return initialState;\r\n}\r\n\r\nconst reducer = (state = initialState, action: actionTypes.AllActions): QuizState => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_QUESTIONS_START: return fetchQuestionsStart(state, action);\r\n        case actionTypes.FETCH_QUESTIONS_SUCCESS: return fetchQuestionsSuccess(state, action);\r\n        case actionTypes.FETCH_QUESTIONS_FAIL: return fetchQuestionsFail(state, action);\r\n        case actionTypes.QUIZ_STARTED: return quizStarted(state, action);\r\n        case actionTypes.SHUFFLE_ANSWERS: return shuffleAnswers(state, action);\r\n        case actionTypes.QUIZ_ENDED: return quizEnded(state, action);\r\n        case actionTypes.QUIZ_QUIT: return quizQuit(state, action);\r\n        case actionTypes.RESET_QUIZ: return reset(state, action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nexport interface Category {\r\n    name: string, \r\n    id: number\r\n};\r\n\r\nexport interface StartPageState {\r\n    loading: boolean,\r\n    dataFetched: boolean,\r\n    settings: {\r\n        available: {\r\n            amount: string[],\r\n            category: Category[],\r\n            difficulty: string[],\r\n            type: string[],\r\n        },\r\n        selected: {\r\n            amount: string,\r\n            category: string,\r\n            difficulty: string,\r\n            type: string,\r\n        },\r\n        apiURL: string,\r\n    }\r\n}\r\n\r\nconst initialState: StartPageState = {\r\n    loading: false,\r\n    dataFetched: false,\r\n    settings: {\r\n        available: {\r\n            amount: [\"5\", \"10\", \"15\", \"20\", \"50\"],\r\n            category: [\r\n                {\r\n                    name: 'Any Category',\r\n                    id: 0,\r\n                }, // categories should be fetched from https://opentdb.com/api_category.php\r\n            ],\r\n            difficulty: ['Any Dificulity', 'Easy', 'Medium', 'Hard'],\r\n            type: ['Any Type', 'Multiple Choice', 'True / False'],\r\n        },\r\n        selected: {\r\n            amount: \"5\",\r\n            category: 'Any Category',\r\n            difficulty: 'Any Dificulity',\r\n            type: 'Any Type',\r\n        },\r\n        apiURL: \"https://opentdb.com/api.php?amount=5&category=0&type=0&dificulty=0\",\r\n    }\r\n}\r\n\r\nconst fetchCategoriesStart = (state: StartPageState, action: actionTypes.fetchCategoriesStart) => {\r\n    return { ...state, loading: true }\r\n}\r\n\r\nconst fetchCategoriesSuccess = (state: StartPageState, action: actionTypes.fetchCategoriesSuccess) => {\r\n    const settingsWithCategories =\r\n    {\r\n        settings: {\r\n            ...state.settings,\r\n            available: {\r\n                ...state.settings.available,\r\n                category: [{name: 'Any Category',id: 0}].concat(action.categories)\r\n            }\r\n        }\r\n    }\r\n    return { ...state, loading: false, ...settingsWithCategories, dataFetched: true }\r\n}\r\n\r\nconst fetchCategoriesFail = (state: StartPageState, action: actionTypes.fetchCategoriesFail<{}>) => {\r\n    console.log(\"Something went wrong\");\r\n    console.log(action.error);\r\n    return { ...state, loading: false }\r\n}\r\n\r\n\r\nconst setSetting = (state: StartPageState, action: actionTypes.setSetting) => {\r\n    const newSelectedSetting = {\r\n        ...state.settings.selected,\r\n        [action.setting]: action.value\r\n    }\r\n    return { ...state, settings: { ...state.settings, selected: { ...newSelectedSetting } } };\r\n}\r\n\r\nconst resetStartPage = (state: StartPageState, action: actionTypes.resetStartPage) => {\r\n    return initialState;\r\n}\r\n\r\nconst generateUrl = (state: StartPageState, action: actionTypes.generateURL): StartPageState => {\r\n    const categoryID = state.settings.available.category.find(category => category.name === state.settings.selected.category)!.id;\r\n    const amount = state.settings.selected.amount;    \r\n    const difficulty = [\"0\", \"easy\", \"medium\", \"hard\"][state.settings.available.difficulty.indexOf(state.settings.selected.difficulty)];\r\n    const type = [\"0\",\"multiple\",\"boolean\"][state.settings.available.type.indexOf(state.settings.selected.type)];    \r\n    const apiURL = `https://opentdb.com/api.php?amount=${amount}&category=${categoryID}&type=${type}&dificulty=${difficulty}`;\r\n    return {...state, settings: {...state.settings, apiURL: apiURL}};\r\n}\r\n\r\nconst reducer = (state = initialState, action: actionTypes.StartPageActions): StartPageState => {\r\n    switch (action.type) {        \r\n        case actionTypes.FETCH_CATEGORIES_START: return fetchCategoriesStart(state, action);\r\n        case actionTypes.FETCH_CATEGORIES_SUCCESS: return fetchCategoriesSuccess(state, action);\r\n        case actionTypes.FETCH_CATEGORIES_FAIL: return fetchCategoriesFail(state, action);\r\n        case actionTypes.SET_SETTING: return setSetting(state, action);\r\n        case actionTypes.GENERATE_URL: return generateUrl(state,action);\r\n        case actionTypes.RESET_START_PAGE: return resetStartPage(state,action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware, compose, combineReducers} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport quizReducer from './store/reducers/quiz';\nimport startPageReducer from './store/reducers/startPage';\n\ndeclare global {\n    interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\n    }\n}\n\nconst composeEnhancers = process.env.NODE_ENV ==='development' \n? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ \n: null || compose;\n\nconst rootReducer = combineReducers({\n    quiz: quizReducer,\n    startPage: startPageReducer,\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\nexport type AppState = ReturnType<typeof rootReducer>"],"sourceRoot":""}