{"version":3,"sources":["webpack:///./src/index.css?552e","index.css","styles.ts","utils/colors.ts","containers/Menu/styles.ts","store/actions/quiz.ts","store/actions/actionTypes.ts","store/actions/startPage.ts","components/UI/Spinner/styles.ts","components/UI/Spinner/index.tsx","components/SettingPanel/styles.ts","components/SettingPanel/Inputs/ButtonInput/styles.ts","components/UI/Tile/styles.ts","components/UI/Tile/index.tsx","components/SettingPanel/Inputs/ButtonInput/config.ts","components/SettingPanel/Inputs/ButtonInput/index.tsx","components/SettingPanel/Inputs/DropdownInput/styles.ts","components/SettingPanel/Inputs/DropdownInput/index.tsx","components/SettingPanel/Inputs/SliderInput/styles.ts","components/UI/Slider/styles.ts","utils/keys.ts","components/UI/Slider/index.tsx","components/SettingPanel/Inputs/SliderInput/index.tsx","components/SettingPanel/index.tsx","components/UI/Button/styles.ts","components/UI/Button/index.tsx","containers/Menu/index.tsx","containers/Quiz/styles.ts","components/Question/styles.ts","components/Question/Answer/config.ts","components/Question/Answer/styles.ts","components/Question/Answer/index.tsx","components/Question/index.tsx","components/NavBar/styles.ts","components/NavBar/index.tsx","components/Summary/styles.ts","components/UI/Score/styles.ts","components/UI/Score/index.tsx","components/Summary/index.tsx","containers/Quiz/index.tsx","App.tsx","store/reducers/quiz.ts","store/reducers/startPage.ts","index.tsx"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","locals","exports","push","root","App","styled","div","_templateObject","PRIMARY_THEME","CORRECT","WRONG","GRAY","StartPage","styles_templateObject","Spinner","_templateObject2","Menu","_templateObject3","quizerIntro","keyframes","_templateObject4","Title","h1","_templateObject5","SubTitle","_templateObject6","initQuiz","dispatch","getState","apiURL","startPage","settings","reset","fetchQuestionsStart","axios","get","then","response","fetchQuestionsSuccess","data","results","shuffleAnswers","quizStarted","catch","err","fetchQuestionsFail","type","questions","error","fetchCategoriesStart","fetchCategoriesSuccess","trivia_categories","categories","fetchCategoriesFail","lds_dual_ring","Spinner_styles_templateObject","styles_templateObject2","react_default","a","createElement","Spinner_styles_Spinner","SettingPanel","SettingPanel_styles_templateObject","ButtonInput","ButtonInput_styles_templateObject","Label","ButtonInput_styles_templateObject2","ButtonsContainer","styles_templateObject3","Tile","Tile_styles_templateObject","props","selected","Tile_styles_templateObject2","Icon","FontAwesomeIcon","Tile_styles_templateObject3","_ref","header","onClick","icon","styles_Tile","faQuestion","styles_Label","icons","Any","ABCD","faList","True/False","faCheckSquare","Easy","faBaby","Medium","faGraduationCap","Hard","faCrown","getIcon","option","label","onChange","styles_ButtonInput","map","UI_Tile","key","DropdownInput","DropdownInput_styles_templateObject","DropdownInput_styles_templateObject2","SelectContainer","DropdownInput_styles_templateObject3","Select","ReactSelect","styles_templateObject4","optionsFormatted","category","value","id","name","filter","pop","styles_DropdownInput","DropdownInput_styles_Label","classNamePrefix","className","newCategory","SliderInput","SliderInput_styles_templateObject","ValueLabel","SliderInput_styles_templateObject2","SliderInput_styles_templateObject3","SliderContainer","SliderInput_styles_templateObject4","Slider","styles_templateObject5","KEYS","input","attrs","min","max","step","Slider_styles_templateObject","Slider_styles_Slider","e","target","styles_SliderInput","SliderInput_styles_Label","styles_Slider","UI_Slider","amount","difficulty","onQuantityChange","onCategoryChange","onDifficultyChange","onTypeChange","styles_SettingPanel","Inputs_SliderInput","Inputs_DropdownInput","values","Inputs_ButtonInput","Button","Button_styles_templateObject","uppercase","concat","size","bold","_ref$label","_ref$size","styles_Button","children","connect","loading","dataAvailable","dataFetched","init","generateURL","actions","setQuestionQuantity","newAmount","setQuestionCategory","setQuestionType","newType","setQuestionDifficulty","newDifficulty","startPageRef","useRef","useEffect","current","focus","handleStartButtonClick","styles_StartPage","tabIndex","onKeyDown","ENTER","ref","styles_Spinner","UI_Spinner","components_SettingPanel","UI_Button","Quiz","Quiz_styles_templateObject","finished","ButtonContainer","Quiz_styles_templateObject2","AnswerStates","QuestionComponent","Question_styles_templateObject","Question","Question_styles_templateObject2","h3","Question_styles_templateObject3","CategoryLabel","p","Question_styles_templateObject4","AnswersContainer","Question_styles_templateObject5","showAnswer","correct","CorrectSelected","IncorrectSelected","Selected","Notselected","answerBackgroundColor","_answerBackgroundColo","Object","defineProperty","answerBorderColor","_answerBorderColor","Answer","data-testid","Answer_styles_templateObject","checkboxBorderColor","_checkboxBorderColor","checkboxBorderWidth","_checkboxBorderWidth","Checkbox","Answer_styles_templateObject2","answer","reveal","styles_Answer","question","answers","correctId","onAnswerPicked","selectedId","styles_Question","Question_Answer","NavBar","NavBar_styles_templateObject","NavBar_styles_templateObject2","QuestionCounter","NavBar_styles_templateObject3","NavBar_styles_templateObject4","currentQuestionNumber","questionsAmount","onQuit","counterLabel","styles_NavBar","styles_ButtonContainer","styles_Icon","faHome","Summary","Summary_styles_templateObject","AnswerContainer","Summary_styles_templateObject2","Summary_styles_templateObject3","isCorrect","_ref2","Summary_styles_templateObject4","CorrectAnswer","Summary_styles_templateObject5","Score","Score_styles_templateObject","Score_styles_templateObject2","StarsContainer","Score_styles_templateObject3","score","roundedScore","Math","round","numOfFullStars","numOfEmptyStars","styles_Score","Score_styles_Label","toConsumableArray","Array","_","index_es","fasStar","farStar","styles_Summary","UI_Score","questionId","Summary_styles_Question","quiz","started","dataLoading","fetching","isDataAvailable","end","quit","_useState","useState","_useState2","slicedToArray","setFinished","_useState3","_useState4","questionNumber","setQuestionNumber","_useState5","_useState6","correctAnswers","setCorrectAnswers","_useState7","_useState8","setSelectedId","quizRef","noQuestionsFound","Boolean","length","correctAnswerId","reduce","prev","curr","_useState9","_useState10","inRevealMode","setInRevealMode","buttonLabel","incorrect_answers","splice","correct_answer","handleButtonClick","isLastQuestion","handleAnswerPicked","selectedAnswerId","styles_Quiz","ESCAPE","ARROW_UP","ARROW_DOWN","isNaN","selectedIdFromKeyDown","components_Summary","q","currentQuestion","components_Question","getContent","components_NavBar","styles_App","containers_Quiz","containers_Menu","initialState","reducer","state","arguments","action","objectSpread","he","decode","incorrectAnswear","console","log","questionsWithAnswerId","forEach","answersAmmount","floor","random","quizQuit","_state$settings","questionsQuantity","categoryID","currCategory","selectedDifficulty","selectedType","generateUrl","composeEnhancers","compose","rootReducer","combineReducers","quizReducer","startPageReducer","store","createStore","applyMiddleware","thunk","app","es","react_router_dom","src_App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56953f16.chunk.js","sourcesContent":["\nvar content = require(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/typings-for-css-modules-loader/lib/index.js??ref--6-oneOf-3-1!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"* {\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  \\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Roboto\\\", \\\"Oxygen\\\",\\n    \\\"Ubuntu\\\", \\\"Cantarell\\\", \\\"Fira Sans\\\", \\\"Droid Sans\\\", \\\"Helvetica Neue\\\",\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\n#_1YYU_vdtEoCzbtmk8tBvTU {\\n  position: absolute;\\n  height: 100%;\\n  width: 100%;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \\\"Courier New\\\",\\n    monospace;\\n}\\n\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"root\": \"_1YYU_vdtEoCzbtmk8tBvTU\"\n};","import styled from 'styled-components';\r\n\r\nexport const App = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    padding: 0;  \r\n    text-align: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n    position: absolute;\r\n    \r\n    font-family: 'Roboto', sans-serif;\r\n    font-weight: 400;\r\n  \r\n    color: #02283B;\r\n    color: #125271;\r\n\r\n    background: white;\r\n`;","export const PRIMARY_THEME = {\r\n    LIGHT: '#3E7996',\r\n    BASE: '#125271',\r\n    DARK: '#022D41',\r\n};\r\n\r\nexport const CORRECT = {\r\n    BASE: '#46C28E',\r\n    LIGHT: '#E9F7F1',\r\n    //DARK: '', // TODO\r\n}\r\n\r\nexport const WRONG = {\r\n    BASE: '#EC5252',\r\n    LIGHT: '#FAEBEB',\r\n    //DARK: '', // TODO\r\n}\r\n\r\nexport const GRAY = {\r\n    BASE: '#D3D3D3',\r\n    LIGHT: '#F2F2F2',\r\n}","import styled, { keyframes } from \"styled-components\";\r\nimport { PRIMARY_THEME } from \"~/utils/colors\";\r\n\r\nexport const StartPage = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    align-self: center;\r\n    height: 100%;\r\n    width: 100%;\r\n    :focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n    height: 300px;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const Menu = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    max-width: 650px;\r\n`;\r\n\r\nconst quizerIntro = keyframes`\r\n    0% {\r\n        transform: scale(0, 0) rotate(0deg);\r\n    }\r\n    60% {\r\n        transform: scale(1.25, 1.25) rotate(360deg) skew(-15deg);\r\n    }\r\n    100% {\r\n        transform: scale(1.15, 1.25) rotate(355deg) skew(-10deg);\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    margin: 20px 0;\r\n    font-size: 6rem;\r\n    animation: ${quizerIntro} 0.4s 0.4s ease-out forwards;\r\n    background: none;\r\n    color: ${PRIMARY_THEME.BASE};\r\n    transform: scale(0, 0);\r\n`;\r\n\r\nexport const SubTitle = styled.div`\r\n    color: ${PRIMARY_THEME.BASE};\r\n`;","import * as actionTypes from './actionTypes';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { Dispatch } from 'react';\r\nimport { IQuestion } from '../reducers/quiz';\r\nimport { AppState } from \"~/index\"; \r\n\r\ninterface CategoriesServerData {\r\n    results: IQuestion[];\r\n};\r\n\r\nexport const initQuiz = () => {\r\n    return (dispatch: Dispatch<actionTypes.AllActions>, getState: () => AppState ) => {\r\n        const apiURL = getState().startPage.settings.apiURL;\r\n        dispatch(reset());\r\n        dispatch(fetchQuestionsStart());\r\n        axios.get(apiURL)\r\n            .then((response: AxiosResponse<CategoriesServerData>) => {\r\n                dispatch(fetchQuestionsSuccess(response.data.results));                \r\n            })\r\n            .then( () => {\r\n                dispatch(shuffleAnswers());\r\n                dispatch(quizStarted())\r\n            })\r\n            .catch((err: AxiosError) => {                \r\n                dispatch(fetchQuestionsFail(err))\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsStart = (): actionTypes.fetchQuestionsStart => {\r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_START,\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsSuccess = (data: IQuestion[]): actionTypes.fetchQuestionsSuccess => {    \r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_SUCCESS,\r\n        questions: data,\r\n    }\r\n}\r\n\r\nexport const fetchQuestionsFail = (error: AxiosError): actionTypes.fetchQuestionsFail<AxiosError> => {\r\n    return {\r\n        type: actionTypes.FETCH_QUESTIONS_FAIL,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const shuffleAnswers = (): actionTypes.shuffleAnswers => {\r\n    return {\r\n        type: actionTypes.SHUFFLE_ANSWERS,\r\n    }\r\n}\r\n\r\nexport const quizStarted = (): actionTypes.quizStarted => {\r\n    return {\r\n        type: actionTypes.QUIZ_STARTED,\r\n    }\r\n}\r\n\r\nexport const quizQuit = (): actionTypes.quizQuit  => {\r\n    return {\r\n        type: actionTypes.QUIZ_QUIT,      \r\n    }\r\n}\r\n\r\nexport const endQuiz = (): actionTypes.endQuiz => {\r\n    return {\r\n        type: actionTypes.QUIZ_ENDED,\r\n    }\r\n}\r\n\r\nexport const reset = (): actionTypes.resetQuiz => {\r\n    return {\r\n        type: actionTypes.RESET_QUIZ,\r\n    }\r\n}","import { Category } from \"../reducers/startPage\";\r\nimport { IQuestion } from \"../reducers/quiz\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const INIT = 'INIT';\r\n\r\nexport const FETCH_CATEGORIES_START = 'FETCH_CATEGORIES_START';\r\nexport const FETCH_CATEGORIES_SUCCESS = 'FETCH_CATEGORIES_SUCCESS';\r\nexport const FETCH_CATEGORIES_FAIL = 'FETCH_CATEGORIES_FAIL';\r\n\r\nexport const SET_QUESTION_QUANTITY = 'SET_QUESTION_QUANTITY';\r\nexport const SET_QUESTION_CATEGORY = 'SET_QUESTION_CATEGORY';\r\nexport const SET_QUESTION_TYPE = 'SET_QUESTION_TYPE';\r\nexport const SET_QUESTION_DIFFICULTY = 'SET_QUESTION_DIFFICULTY';\r\n\r\nexport const GENERATE_URL = 'GENERATE_URL';\r\n\r\nexport const RESET_START_PAGE = 'RESET_START_PAGE';\r\n\r\n// ----------------------------\r\n\r\nexport const QUIZ_STARTED = 'QUIZ_STARTED';\r\n\r\nexport const FETCH_QUESTIONS_START = 'FETCH_QUESTIONS_START';\r\nexport const FETCH_QUESTIONS_SUCCESS = 'FETCH_QUESTIONS_SUCCESS';\r\nexport const FETCH_QUESTIONS_FAIL = 'FETCH_QUESTIONS_FAIL';\r\n\r\nexport const SHUFFLE_ANSWERS = 'SHUFFLE_ANSWERS';\r\n\r\nexport const QUIZ_ENDED = 'QUIZ_ENDED';\r\nexport const QUIZ_QUIT = 'QUIZ_QUIT';\r\n\r\nexport const RESET_QUIZ = \"RESET_QUIZ\";\r\n\r\n// ----------------------------\r\n\r\nexport interface fetchQuestionsStart {\r\n    type: typeof FETCH_QUESTIONS_START,\r\n}\r\n\r\nexport interface fetchQuestionsSuccess {\r\n    type: typeof FETCH_QUESTIONS_SUCCESS,\r\n    questions: IQuestion[],\r\n}\r\n\r\nexport interface fetchQuestionsFail<T> {\r\n    type: typeof FETCH_QUESTIONS_FAIL,\r\n    error: T,\r\n}\r\n\r\nexport interface shuffleAnswers {\r\n    type: typeof SHUFFLE_ANSWERS,\r\n}\r\n\r\nexport interface quizStarted {\r\n    type: typeof QUIZ_STARTED,\r\n}\r\n\r\nexport interface endQuiz {\r\n    type: typeof QUIZ_ENDED,\r\n}\r\n\r\nexport interface quizQuit {\r\n    type: typeof QUIZ_QUIT,\r\n}\r\n\r\nexport interface resetQuiz {\r\n    type: typeof RESET_QUIZ,\r\n}\r\n\r\nexport type QuizActions = fetchQuestionsStart | fetchQuestionsSuccess | fetchQuestionsFail<any> | shuffleAnswers |\r\nquizStarted |  endQuiz | quizQuit | resetQuiz;\r\n\r\n// ----------------------------\r\n\r\nexport interface init extends Dispatch { }\r\n\r\nexport interface fetchCategoriesStart {\r\n    type: typeof FETCH_CATEGORIES_START,\r\n}\r\n\r\nexport interface fetchCategoriesSuccess {\r\n    type: typeof FETCH_CATEGORIES_SUCCESS,\r\n    categories: Category[],\r\n}\r\n\r\nexport interface fetchCategoriesFail<T> {\r\n    type: typeof FETCH_CATEGORIES_FAIL,\r\n    error: T,\r\n}\r\n\r\nexport interface setQuestionQuantity {\r\n    type: typeof SET_QUESTION_QUANTITY,\r\n    value: number,\r\n}\r\n\r\nexport interface setQuestionCategory {\r\n    type: typeof SET_QUESTION_CATEGORY,\r\n    value: Category,\r\n}\r\n\r\nexport interface setQuestionType {\r\n    type: typeof SET_QUESTION_TYPE,\r\n    value: string,\r\n}\r\n\r\nexport interface setQuestionDifficulty {\r\n    type: typeof SET_QUESTION_DIFFICULTY,\r\n    value: string,\r\n}\r\n\r\nexport interface generateURL {\r\n    type: typeof GENERATE_URL,\r\n}\r\n\r\nexport interface resetStartPage {\r\n    type: typeof RESET_START_PAGE,\r\n}\r\n\r\nexport type StartPageActions = fetchCategoriesStart | fetchCategoriesSuccess | fetchCategoriesFail<any> |\r\n    setQuestionQuantity | setQuestionCategory | setQuestionType | setQuestionDifficulty | generateURL | resetStartPage;\r\n\r\n\r\nexport type AllActions = QuizActions | StartPageActions;","import { Category } from '../reducers/startPage';\r\nimport * as actionTypes from './actionTypes';\r\nimport axios, { AxiosResponse, AxiosError } from 'axios';\r\nimport { Dispatch } from 'redux';\r\n\r\ninterface CategoriesServerData {\r\n    trivia_categories: Category[];\r\n}\r\n\r\nexport const init = () => {\r\n    return (dispatch: Dispatch<actionTypes.StartPageActions>) => {\r\n        dispatch(fetchCategoriesStart());\r\n        axios.get('https://opentdb.com/api_category.php')\r\n            .then((response: AxiosResponse<CategoriesServerData>) => {\r\n                dispatch(fetchCategoriesSuccess(response.data.trivia_categories))\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(fetchCategoriesFail(err))\r\n            });\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesStart = (): actionTypes.fetchCategoriesStart => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_START,\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesSuccess = (trivia_categories: Category[]): actionTypes.fetchCategoriesSuccess => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_SUCCESS,\r\n        categories: trivia_categories,\r\n    }\r\n}\r\n\r\nexport const fetchCategoriesFail = (error: AxiosError): actionTypes.fetchCategoriesFail<AxiosError> => {\r\n    return {\r\n        type: actionTypes.FETCH_CATEGORIES_FAIL,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const setQuestionQuantity = (value: number): actionTypes.setQuestionQuantity => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_QUANTITY,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const setQuestionCategory = (value: Category): actionTypes.setQuestionCategory => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_CATEGORY,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const setQuestionDifficulty = (value: string): actionTypes.setQuestionDifficulty => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_DIFFICULTY,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const setQuestionType = (value: string): actionTypes.setQuestionType => {\r\n    return {\r\n        type: actionTypes.SET_QUESTION_TYPE,\r\n        value: value,\r\n    }\r\n}\r\n\r\nexport const generateURL = (): actionTypes.generateURL => {\r\n    return {\r\n        type: actionTypes.GENERATE_URL,\r\n    }\r\n}\r\n\r\nexport const reset = (): actionTypes.resetStartPage => {\r\n    return {\r\n        type: actionTypes.RESET_START_PAGE,\r\n    }\r\n}","import styled, { keyframes } from \"styled-components\";\r\nimport { PRIMARY_THEME } from \"~/utils/colors\";\r\n\r\nconst lds_dual_ring = keyframes`\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n  display: flex;\r\n  width: 64px;\r\n  height: 64px;\r\n  margin: 36px auto;\r\n  \r\n  :after {\r\n    content: \" \";\r\n    display: block;\r\n    width: 46px;\r\n    height: 46px;\r\n    margin: 1px;\r\n    border-radius: 50%;\r\n    border: 5px solid #125271;\r\n    border-color: ${PRIMARY_THEME.BASE} transparent ${PRIMARY_THEME.BASE} transparent;\r\n    animation: ${lds_dual_ring} 1.2s linear infinite;\r\n  }\r\n`;","import React from 'react';\r\nimport * as styled from './styles'\r\n\r\nconst Spinner = () => <styled.Spinner/>\r\n\r\nexport default Spinner;","import styled from 'styled-components';\r\n\r\nexport const SettingPanel = styled.div`\r\n    width: 100%;\r\n    max-width: 900px;\r\n    margin: 20px 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const ButtonInput = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 5px 0px;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    text-align: end;\r\n    flex: 1;\r\n    font-size: 1.5rem;\r\n    padding: 0 20px;\r\n    border-right: 1px solid #D3D3D3;\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex: 4;\r\n    flex-wrap: wrap;\r\n`;","import styled from 'styled-components';\r\nimport { GRAY, PRIMARY_THEME } from \"~/utils/colors\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\ninterface ISelectable {\r\n    selected: boolean,\r\n}\r\n\r\nexport const Tile = styled.div<ISelectable>`\r\n    width: 82px;\r\n    height: 82px;\r\n    border-width: ${props => props.selected ? '2px' : '1px'};\r\n    border-style: solid;\r\n    border-color: ${props => props.selected ? PRIMARY_THEME.BASE : GRAY.BASE};\r\n    border-radius: 6px;\r\n    margin: 5px;\r\n    font-size: '1rem';\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    cursor: pointer;\r\n    :hover {\r\n        box-shadow: 0px 0px 4px 0px #ababab;\r\n    }\r\n    color: ${props => props.selected ? PRIMARY_THEME.BASE : GRAY.BASE};\r\n    \r\n`;\r\n\r\nexport const Label = styled.div`\r\n    white-space: nowrap;\r\n`;\r\n\r\nexport const Icon = styled(FontAwesomeIcon)<ISelectable>`\r\n    color: inherit;\r\n    font-size: 2rem;\r\n    :hover {\r\n        color: inherit;\r\n    }\r\n    \r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { faQuestion } from '@fortawesome/free-solid-svg-icons';\r\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types';\r\n\r\ninterface ITile {\r\n    header: string,\r\n    selected: boolean,\r\n    onClick: () => void,\r\n    icon?: IconDefinition,\r\n}\r\n\r\nconst Tile: React.FC<ITile> = ({ selected, header, onClick, icon}) => {\r\n    return (\r\n        <styled.Tile selected={selected} onClick={onClick}>\r\n            <styled.Icon selected={selected} icon={icon || faQuestion} />\r\n            <styled.Label>{header}</styled.Label>\r\n        </styled.Tile>\r\n    );\r\n}\r\n\r\nexport default Tile;","import { faQuestion, faList, faCheckSquare, faBaby, faCrown, faGraduationCap } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst icons = {\r\n    \"Any\": faQuestion,\r\n    \"ABCD\": faList, \"True/False\": faCheckSquare,\r\n    \"Easy\": faBaby, \"Medium\": faGraduationCap, \"Hard\": faCrown,\r\n}\r\n\r\nexport const getIcon = (option: string) => {\r\n    return icons[option] || faQuestion;\r\n}","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Tile from \"~/components/UI/Tile\";\r\nimport { IInput } from '../';\r\nimport { getIcon } from './config';\r\n\r\nconst ButtonInput: React.FC<IInput<string>> = ({ label, options, selected, onChange }) => {\r\n    return (\r\n        <styled.ButtonInput>\r\n            <styled.Label>{label}</styled.Label>\r\n            <styled.ButtonsContainer>\r\n                {options.map((option,i) => (\r\n                    <Tile key={i} icon={getIcon(option)} header={option} selected={option === selected} onClick={() => onChange(option)} />\r\n                ))}\r\n            </styled.ButtonsContainer>\r\n        </styled.ButtonInput>\r\n    )\r\n}\r\n\r\nexport default ButtonInput;","import styled from 'styled-components';\r\nimport ReactSelect from 'react-select';\r\nimport { PRIMARY_THEME, GRAY } from '~/utils/colors';\r\n\r\nexport const DropdownInput = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 10px 0px;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    text-align: end;\r\n    flex: 1;\r\n    font-size: 1.5rem;\r\n    padding: 0 20px;\r\n    border-right: 1px solid ${GRAY.BASE};\r\n`;\r\n\r\nexport const SelectContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex: 4;\r\n`;\r\n\r\nexport const Select = styled(ReactSelect)`\r\n    &.reactSelect {\r\n        width: 100%;\r\n        max-width: 400px;\r\n        color: ${PRIMARY_THEME.BASE};\r\n        & .rSelect__control {\r\n            cursor: pointer;\r\n        }\r\n        & .rSelect__control--is-focused {\r\n            border: 1px solid lightgray;\r\n            box-shadow: none;\r\n        }\r\n        & .rSelect__option--is-focused {\r\n            background: lightgray;\r\n        }\r\n        & .rSelect__option--is-selected {\r\n            background: ${PRIMARY_THEME.BASE};\r\n        }\r\n        & .rSelect__single-value {\r\n            color: inherit;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { Category } from \"~/store/reducers/startPage\";\r\nimport { IInput } from '../';\r\nimport { ValueType } from \"react-select\";\r\n\r\ntype OptionType = { label: string; value: number };\r\n\r\nconst DropdownInput: React.FC<IInput<Category>> = (props) => {\r\n    const optionsFormatted = props.options.map(category => ({ value: category.id, label: category.name }));\r\n    const value = optionsFormatted.filter(category => category.value === props.selected.id).pop();\r\n    const handleChange = (newCategory: ValueType<OptionType>) => {\r\n        const id = (newCategory as OptionType).value;\r\n        const name = (newCategory as OptionType).label;\r\n        props.onChange({ id, name });\r\n    }\r\n\r\n    return (\r\n        <styled.DropdownInput>\r\n            <styled.Label>{props.label}</styled.Label>\r\n            <styled.SelectContainer>\r\n                <styled.Select classNamePrefix=\"rSelect\" className=\"reactSelect\" value={value} options={optionsFormatted} onChange={handleChange} />\r\n            </styled.SelectContainer>\r\n        </styled.DropdownInput>\r\n    )\r\n}\r\n\r\nexport default DropdownInput;","import styled from 'styled-components';\r\nimport { GRAY } from '~/utils/colors';\r\n\r\nexport const SliderInput = styled.div`\r\n    display: flex;\r\n    margin: 10px 0px;\r\n`;\r\n\r\nexport const ValueLabel = styled.div`\r\n    font-size: 1.5rem;\r\n    flex: 1;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    width: 100%;\r\n    flex: 1;\r\n    text-align: end;\r\n    font-size: 1.5rem;\r\n    padding: 0 20px;\r\n    border-right: 1px solid ${GRAY.BASE};\r\n`;\r\n\r\nexport const SliderContainer = styled.div`\r\n    width: 100%;\r\n    flex: 4;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const Slider = styled.div`\r\n    flex: 3;\r\n    padding-right: 50px;\r\n`;","import styled from 'styled-components';\r\nimport { PRIMARY_THEME } from '~/utils/colors';\r\n\r\ninterface ISlider {\r\n    min: number,\r\n    max: number,\r\n}\r\n\r\nexport const Slider = styled.input.attrs<ISlider>(props => ({\r\n    type: \"range\",\r\n    min: props.min,\r\n    max: props.max,\r\n    step: 5,\r\n}))`\r\n    -webkit-appearance: none;\r\n    width: 100%;\r\n    height: 8px;\r\n    background: lightgrey;\r\n    outline: none;\r\n    border-radius: 16px;\r\n    cursor: pointer;\r\n\r\n    ::-webkit-slider-thumb {\r\n        -webkit-appearance: none;\r\n        appearance: none;\r\n        width: 20px;\r\n        height: 20px;\r\n        background: ${PRIMARY_THEME.BASE};\r\n        border-radius: 50%;\r\n    }\r\n`;","enum KEYS {\r\n    ENTER = 'Enter',\r\n    ESCAPE = 'Escape',\r\n    ARROW_UP = 'ArrowUp',\r\n    ARROW_DOWN = 'ArrowDown',\r\n    ARROW_RIGHT = 'ArrowRight',\r\n    ARROW_LEFT = 'ArrowLeft',\r\n    ONE = '1',\r\n    TWO = '2',\r\n    THREE = '3',\r\n    FOUR = '4',\r\n}\r\n\r\nexport default KEYS;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface ISlider {\r\n    value: number,\r\n    min: number,\r\n    max: number,\r\n    onChange: (value: number) => void,\r\n}\r\n\r\nconst Slider: React.FC<ISlider> = ({value, min, max, onChange}) => {\r\n    const handleSliderChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        onChange(+e.target.value);\r\n    }\r\n    return (\r\n        <styled.Slider min={min} max={max} value={value} onChange={handleSliderChange}/>\r\n    );\r\n}\r\n\r\nexport default Slider;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Slider from '~/components/UI/Slider';\r\nimport { IInput } from '../';\r\n\r\nconst SliderInput: React.FC<IInput<number>> = ({ label, selected, options, onChange }) => {\r\n    return (\r\n        <styled.SliderInput>\r\n            <styled.Label>{label}</styled.Label>\r\n            <styled.SliderContainer>\r\n                <styled.ValueLabel>{selected}</styled.ValueLabel>\r\n                <styled.Slider>\r\n                    <Slider value={selected} min={options[0] || 0} max={options[1] || 1} onChange={onChange} />\r\n                </styled.Slider>\r\n            </styled.SliderContainer>\r\n        </styled.SliderInput>\r\n    )\r\n};\r\n\r\nexport default SliderInput;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { ISetting, Category } from \"~/store/reducers/startPage\";\r\nimport { DropdownInput, SliderInput, ButtonInput } from './Inputs';\r\n\r\ninterface ISettingPanel {\r\n    amount: ISetting<number>,\r\n    category: ISetting<Category>,\r\n    difficulty: ISetting<string>,\r\n    type: ISetting<string>,\r\n    onQuantityChange: (newAmount: number) => void,\r\n    onCategoryChange: (newAmount: Category) => void,\r\n    onTypeChange: (newAmount: string) => void,\r\n    onDifficultyChange: (newAmount: string) => void,\r\n}\r\n\r\nconst SettingPanel: React.FC<ISettingPanel> = (props) => {\r\n    const {amount, category, difficulty, type} = props;\r\n    const {onQuantityChange, onCategoryChange, onDifficultyChange, onTypeChange } = props;\r\n\r\n    return (\r\n        <styled.SettingPanel>\r\n            <SliderInput label=\"Quantity\" options={[5,30]} selected={amount.selected} onChange={onQuantityChange} />\r\n            <DropdownInput label=\"Category\" options={category.values} selected={category.selected} onChange={onCategoryChange} />\r\n            <ButtonInput label=\"Type\" options={type.values} selected={type.selected} onChange={onTypeChange} />\r\n            <ButtonInput label=\"Difficulty\" options={difficulty.values} selected={difficulty.selected} onChange={onDifficultyChange} />\r\n        </styled.SettingPanel>\r\n    )\r\n}\r\n\r\nexport default SettingPanel;","import styled from \"styled-components\";\r\nimport { PRIMARY_THEME } from \"~/utils/colors\";\r\n\r\ninterface IButtonStyle {\r\n    size: number,\r\n    uppercase?: boolean,\r\n    bold?: boolean,\r\n}\r\n\r\nexport const Button = styled.div<IButtonStyle>`\r\n    color: white;\r\n    text-decoration: none;\r\n    text-transform: ${props => props.uppercase ? 'uppercase' : 'none'};\r\n    cursor: pointer;\r\n    background: ${PRIMARY_THEME.BASE};\r\n    padding: 15px 25px;\r\n    font-size: ${props => `${props.size}rem`};\r\n    font-weight: ${props => props.bold ? 'bold' : 'normal' };\r\n    margin: 2rem;\r\n    :hover {\r\n        background: ${PRIMARY_THEME.DARK};\r\n    }\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface IButton {\r\n    label?: string,\r\n    size?: number,\r\n    uppercase?: boolean,\r\n    bold?: boolean,\r\n    onClick: () => void,\r\n}\r\n\r\nconst Button: React.FC<IButton> = ({label='', onClick, size=1.25, uppercase, bold}) => {\r\n    return (\r\n        <styled.Button\r\n            bold={bold}\r\n            uppercase={uppercase}\r\n            size={size}\r\n            children={label}\r\n            onClick={onClick} />\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { useEffect, useRef } from 'react';\r\nimport * as styled from './styles';\r\nimport { connect } from 'react-redux';\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport * as actions from '../../store/actions/index';\r\nimport { StartPageActions } from '../../store/actions/actionTypes';\r\nimport { ISettings, Category } from \"~/store/reducers/startPage\";\r\nimport Spinner from '~/components/UI/Spinner';\r\nimport { AppState } from \"~/index\";\r\nimport SettingPanel from '~/components/SettingPanel';\r\nimport KEYS from \"~/utils/keys\";\r\nimport Button from \"~/components/UI/Button\";\r\n\r\ninterface IStateProps {\r\n    settings: ISettings,\r\n    loading: boolean,\r\n    apiURL: string,\r\n    dataAvailable: boolean,\r\n}\r\n\r\ninterface IDispatchProps {\r\n    init: () => void,\r\n    generateURL: () => void,\r\n    initQuiz: () => void,\r\n    setQuestionQuantity: (value: number) => void,\r\n    setQuestionCategory: (value: Category) => void,\r\n    setQuestionType: (value: string) => void,\r\n    setQuestionDifficulty: (value: string) => void,\r\n}\r\n\r\nconst StartPage: React.FC<IStateProps & IDispatchProps> = (props) => {\r\n    const { init, settings, loading, generateURL, initQuiz, dataAvailable } = props;\r\n    const { setQuestionQuantity, setQuestionCategory, setQuestionType, setQuestionDifficulty } = props;\r\n    const {amount, category, difficulty, type } = settings;\r\n    const startPageRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        !dataAvailable && init();\r\n    }, [init, dataAvailable]);\r\n\r\n    useEffect(() => {\r\n        if (startPageRef?.current) {\r\n            startPageRef.current.focus();\r\n        }\r\n    }, [startPageRef]);\r\n\r\n    const handleStartButtonClick = () => {\r\n        generateURL();\r\n        initQuiz();\r\n    }\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if(e.key === KEYS.ENTER) {\r\n            handleStartButtonClick();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <styled.StartPage tabIndex={0} onKeyDown={handleKeyDown} ref={startPageRef}>\r\n            <styled.Menu>\r\n                <styled.Title>Quizer</styled.Title>\r\n                <styled.SubTitle>\r\n                    <p>Quiz generator with use of Trivia API opentdb.com</p>\r\n                    <p>created by Jacek Smetek</p>\r\n                </styled.SubTitle>\r\n                {loading ? <styled.Spinner><Spinner/></styled.Spinner>\r\n                    : <SettingPanel \r\n                        amount={amount}\r\n                        onQuantityChange={setQuestionQuantity}\r\n                        category={category}\r\n                        onCategoryChange={setQuestionCategory}\r\n                        difficulty={difficulty}\r\n                        onDifficultyChange={setQuestionDifficulty}\r\n                        type={type}\r\n                        onTypeChange={setQuestionType} /> }\r\n            </styled.Menu>\r\n            {!loading && <Button uppercase bold size={2} label={'Start'} onClick={handleStartButtonClick}/>}\r\n        </styled.StartPage>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ startPage }: AppState): IStateProps => {\r\n    return {\r\n        settings: startPage.settings,\r\n        loading: startPage.loading,\r\n        apiURL: startPage.settings.apiURL,\r\n        dataAvailable: startPage.dataFetched,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState,null,StartPageActions>): IDispatchProps => {\r\n    return {\r\n        init: () => dispatch(actions.init()),\r\n        generateURL: () => dispatch(actions.generateURL()),\r\n        initQuiz: () => dispatch(actions.initQuiz()),\r\n        setQuestionQuantity: (newAmount) => dispatch(actions.setQuestionQuantity(newAmount)),\r\n        setQuestionCategory: (newCategory) => dispatch(actions.setQuestionCategory(newCategory)),\r\n        setQuestionType: (newType) => dispatch(actions.setQuestionType(newType)),\r\n        setQuestionDifficulty: (newDifficulty) => dispatch(actions.setQuestionDifficulty(newDifficulty)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StartPage);","import styled from \"styled-components\";\r\n\r\ninterface IQuizStyle {\r\n    finished: boolean, \r\n    ref: React.MutableRefObject<HTMLDivElement | null>,\r\n}\r\n\r\nexport const Quiz = styled.div<IQuizStyle>`\r\n    align-self: center;\r\n    width: 80%;\r\n    max-width: 700px;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: ${props => props.finished ? 'start' : 'center'};\r\n    align-items: center;\r\n    flex-direction: column;\r\n    :focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n    padding-bottom: 60px;\r\n`;","import styled from \"styled-components\";\r\nimport { PRIMARY_THEME } from \"~/utils/colors\";\r\n\r\nexport const QuestionComponent = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n    color: ${PRIMARY_THEME.BASE};\r\n`;\r\n\r\nexport const QuestionHeader = styled.div`\r\n   display: flex;\r\n`;\r\n\r\nexport const Question = styled.h3`\r\n    display: flex;\r\n    margin: 15px 0;\r\n`;\r\n\r\nexport const CategoryLabel = styled.p` \r\n    font-style: italic;\r\n    display: flex;\r\n`;\r\n\r\nexport const AnswersContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;","enum AnswerStates { CorrectSelected = 'CS', IncorrectSelected = 'IS', Selected = 'S', Notselected = 'NS' };\r\n\r\nexport {\r\n    AnswerStates,\r\n}","import styled from 'styled-components';\r\nimport { CORRECT, WRONG, GRAY, PRIMARY_THEME } from '~/utils/colors';\r\nimport { AnswerStates } from \"./config\";\r\n\r\ninterface IAnswerProps {\r\n    selected: boolean,\r\n    showAnswer: boolean,\r\n    correct: boolean,\r\n}\r\n\r\nconst getState = (props: IAnswerProps): AnswerStates => {\r\n    const { selected, showAnswer, correct } = props;\r\n    if (selected) {\r\n        if (showAnswer) {\r\n            if (correct) {\r\n                return AnswerStates.CorrectSelected;\r\n            } else {\r\n                return AnswerStates.IncorrectSelected;\r\n            }\r\n        } else {\r\n            return AnswerStates.Selected;\r\n        }\r\n    }\r\n    return AnswerStates.Notselected;\r\n};\r\n\r\nconst answerBackgroundColor = {\r\n    [AnswerStates.CorrectSelected]: CORRECT.LIGHT,\r\n    [AnswerStates.IncorrectSelected]: WRONG.LIGHT,\r\n    [AnswerStates.Selected]: 'transparent',\r\n    [AnswerStates.Notselected]: 'transparent',\r\n}\r\n\r\nconst answerBorderColor = {\r\n    [AnswerStates.CorrectSelected]: CORRECT.BASE,\r\n    [AnswerStates.IncorrectSelected]: WRONG.BASE,\r\n    [AnswerStates.Selected]: GRAY.BASE,\r\n    [AnswerStates.Notselected]: GRAY.BASE,\r\n}\r\n\r\nexport const Answer = styled.div.attrs<IAnswerProps>(props => ({\r\n    'data-testid': getState(props),\r\n})) <IAnswerProps>`\r\n    display: flex;\r\n    width: 100%;\r\n    padding: 15px 0;\r\n    cursor: pointer;\r\n    background-color: ${props => answerBackgroundColor[getState(props)]};\r\n    :hover {\r\n        background: ${GRAY.LIGHT};\r\n    }\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: ${props => answerBorderColor[getState(props)]};\r\n    margin: 5px 0;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst checkboxBorderColor = {\r\n    [AnswerStates.CorrectSelected]: CORRECT.BASE,\r\n    [AnswerStates.IncorrectSelected]: WRONG.BASE,\r\n    [AnswerStates.Selected]: PRIMARY_THEME.BASE,\r\n    [AnswerStates.Notselected]: GRAY.BASE,\r\n}\r\n\r\nconst checkboxBorderWidth = {\r\n    [AnswerStates.CorrectSelected]: '10px',\r\n    [AnswerStates.IncorrectSelected]: '6px',\r\n    [AnswerStates.Selected]: '6px',\r\n    [AnswerStates.Notselected]: '1px',\r\n}\r\n\r\nexport const Checkbox = styled.div<IAnswerProps>`\r\n    width: 20px;\r\n    height: 20px;\r\n    border-width: ${props => checkboxBorderWidth[getState(props)]};\r\n    border-style: solid;\r\n    border-color: ${props => checkboxBorderColor[getState(props)]};\r\n    margin: 0 10px;\r\n    border-radius: 50%;\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\n\r\ninterface IAnswerProps {\r\n    answer: string,\r\n    selected: boolean,\r\n    correct: boolean,\r\n    reveal: boolean,\r\n    onClick: () => void,\r\n}\r\n\r\nconst Answer: React.FC<IAnswerProps> = ({ selected, onClick, answer, correct, reveal }) =>\r\n    <styled.Answer\r\n        selected={selected}\r\n        correct={correct}\r\n        showAnswer={reveal}\r\n        onClick={!reveal ? onClick : undefined} >\r\n        <styled.Checkbox showAnswer={reveal} correct={correct} selected={selected} />\r\n        {answer}\r\n    </styled.Answer>\r\n\r\nexport default Answer;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Answer from './Answer';\r\n\r\ninterface QuestionProps {\r\n    question: string,\r\n    category: string,\r\n    answers: string[],\r\n    correctId: number,\r\n    reveal: boolean,\r\n    selectedId?: number,\r\n    onAnswerPicked: (answerId: number) => void,\r\n}\r\n\r\nconst Question: React.FunctionComponent<QuestionProps> = ({ question, category, answers, correctId, reveal, onAnswerPicked, selectedId }) =>\r\n    (\r\n        <styled.QuestionComponent>\r\n            <styled.CategoryLabel>{`Category: ${category}`}</styled.CategoryLabel>\r\n            <styled.Question>{question}</styled.Question>\r\n            <styled.AnswersContainer>\r\n                {answers.map((answer, i) => (\r\n                    <Answer\r\n                        key={i}\r\n                        answer={answer}\r\n                        selected={(selectedId == null && reveal) || selectedId === i || (reveal && correctId === i)}\r\n                        correct={correctId === i}\r\n                        reveal={reveal}\r\n                        onClick={() => onAnswerPicked(i)} />\r\n                ))}\r\n            </styled.AnswersContainer>\r\n        </styled.QuestionComponent>\r\n    );\r\n\r\nexport default Question;","import styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { PRIMARY_THEME } from \"~/utils/colors\";\r\n\r\nexport const NavBar = styled.div`\r\n    color: ${PRIMARY_THEME.BASE};\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: fixed;\r\n    text-align: left;\r\n    background: #F2F2F2;\r\n    width: 100%;\r\n    bottom: 0;\r\n    padding: 0 15px;\r\n    left: 0;\r\n`;\r\n\r\nexport const Icon = styled(FontAwesomeIcon)`\r\n    font-size: 2rem;\r\n    margin: 15px;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const QuestionCounter = styled.div`\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n`;","import React from 'react'\r\nimport * as styled from './styles'\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface INavBarProps {\r\n    currentQuestionNumber: number,\r\n    questionsAmount: number,\r\n    loading: boolean,\r\n    finished: boolean,\r\n    onQuit: () => void,\r\n};\r\n\r\nconst NavBar: React.FC<INavBarProps> = ({ currentQuestionNumber, questionsAmount, loading, finished, onQuit }) => {\r\n    let counterLabel = '';\r\n    if(loading) {\r\n        counterLabel = 'Loading...';\r\n    } else {\r\n        if(questionsAmount){\r\n            counterLabel = `Question ${currentQuestionNumber} of ${questionsAmount}`;\r\n        }\r\n    }\r\n    return (\r\n        <styled.NavBar>\r\n            <styled.QuestionCounter>{counterLabel}</styled.QuestionCounter>\r\n            <styled.ButtonContainer>\r\n                <styled.Icon onClick={onQuit} icon={faHome}/>\r\n            </styled.ButtonContainer>\r\n        </styled.NavBar>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import styled from 'styled-components';\r\nimport { PRIMARY_THEME, CORRECT, WRONG } from '~/utils/colors';\r\n\r\ninterface IAnswerContainerStyle {\r\n    isCorrect: boolean,\r\n}\r\n\r\nexport const Summary = styled.div`\r\n    color: ${PRIMARY_THEME.BASE};\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport const ScoreContainer = styled.div`\r\n    padding: 50px 0;\r\n    font-size: 3rem;\r\n    font-weight: 500;\r\n`;\r\n\r\nexport const AnswerContainer = styled.div<IAnswerContainerStyle>`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 15px 0;\r\n    margin: 5px;\r\n    background-color: ${({isCorrect}) => isCorrect ? CORRECT.LIGHT : WRONG.LIGHT};\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-color: ${({isCorrect}) => isCorrect ? CORRECT.BASE : WRONG.BASE };\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport const Question = styled.div`\r\n    text-align: left;\r\n    width: 80%;\r\n    padding: 0 15px;\r\n`;\r\n\r\nexport const CorrectAnswer = styled.div`\r\n    width: 20%;\r\n    text-align: left;\r\n    border-left: 1px solid lightgray;\r\n    display: flex;\r\n    padding: 0 15px;\r\n    align-items: center;\r\n    overflow: hidden;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const Score = styled.div`\r\n    padding: 40px 0;\r\n    font-weight: 500;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    font-size: 4rem;\r\n`;\r\n\r\nexport const StarsContainer = styled.div`\r\n    font-size: 2rem;\r\n    display: flex;\r\n    justify-content: center;\r\n`;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStar as fasStar } from '@fortawesome/free-solid-svg-icons';\r\nimport { faStar as farStar } from '@fortawesome/free-regular-svg-icons';\r\n\r\ninterface IScore {\r\n    score: number,\r\n}\r\n\r\nconst Score: React.FC<IScore> = ({ score }) => {\r\n    const roundedScore = Math.max(Math.min(Math.round(score), 100), 0);\r\n    const numOfFullStars = Math.max(Math.min(Math.round(score / 20) === 5 && roundedScore !== 100 ? 4 : Math.round(score / 20), 5), 0);\r\n    const numOfEmptyStars = 5 - numOfFullStars;\r\n    return (\r\n        <styled.Score>\r\n            <styled.Label>{roundedScore}%</styled.Label>\r\n            <styled.StarsContainer>\r\n                {[...Array(numOfFullStars)].map((_, i) => <FontAwesomeIcon key={i} icon={fasStar} />)}\r\n                {[...Array(numOfEmptyStars)].map((_, i) => <FontAwesomeIcon key={i} icon={farStar} />)}\r\n            </styled.StarsContainer>\r\n        </styled.Score>\r\n    );\r\n};\r\n\r\nexport default Score;","import React from 'react';\r\nimport * as styled from './styles';\r\nimport Score from '~/components/UI/Score';\r\n\r\ninterface ISummary {\r\n    questions: {\r\n        question: string,\r\n        answer: string,\r\n        isCorrect: boolean,\r\n    }[],\r\n    score: number,\r\n}\r\n\r\nconst Summary: React.FC<ISummary> = ({ questions, score }) => {\r\n    return (\r\n        <styled.Summary>\r\n            <Score score={score} />\r\n            {questions.map(({ question, answer, isCorrect }, questionId) =>\r\n                <styled.AnswerContainer key={questionId} isCorrect={isCorrect}>\r\n                    <styled.Question> {question} </styled.Question>\r\n                    <styled.CorrectAnswer> {answer} </styled.CorrectAnswer>\r\n                </styled.AnswerContainer>\r\n            )}\r\n        </styled.Summary>\r\n    )\r\n};\r\n\r\nexport default Summary;","import React, { useState, useRef, useEffect } from 'react';\r\nimport * as styled from './styles';\r\nimport Question from '../../components/Question';\r\nimport { connect } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport * as actions from '../../store/actions/index';\r\nimport { QuizActions } from '../../store/actions/actionTypes';\r\nimport Spinner from '../../components/UI/Spinner';\r\nimport NavBar from \"~/components/NavBar\";\r\nimport Button from '../../components/UI/Button';\r\nimport { AppState } from '../../index';\r\nimport Summary from \"~/components/Summary\";\r\nimport { IQuestion } from \"~/store/reducers/quiz\";\r\nimport KEYS from \"~/utils/keys\";\r\n\r\ninterface StateProps {\r\n    questions: IQuestion[],\r\n    quizStarted: boolean,\r\n    dataLoading: boolean,\r\n    isDataAvailable: boolean,\r\n}\r\n\r\ninterface DispatchProps {\r\n    end: () => void,\r\n    initQuiz: () => void,\r\n    quit: () => void,\r\n}\r\n\r\nconst Quiz: React.FC<StateProps & DispatchProps> = props => {\r\n    const [finished, setFinished] = useState(false);\r\n    const [questionNumber, setQuestionNumber] = useState(1);\r\n    const [correctAnswers, setCorrectAnswers] = useState<boolean[]>([]);\r\n    const questionId = questionNumber - 1;\r\n    const [selectedId, setSelectedId] = useState<number>();\r\n    const question = props.questions[questionId];\r\n    const quizRef = useRef<HTMLDivElement>(null);\r\n    const noQuestionsFound = Boolean(!props.questions.length);\r\n\r\n    let answers: string[] = [];\r\n    const questionsAmount = props.questions.length;\r\n    const correctAnswerId = question?.correctAnswerId;\r\n    const score = correctAnswers.reduce((prev, curr) => curr ? prev + 1 : prev, 0) / questionsAmount * 100;\r\n\r\n    const [inRevealMode, setInRevealMode] = useState(false);\r\n    const buttonLabel = noQuestionsFound ? 'Back' : finished ? 'Try Again!' : inRevealMode ? \"Next\" : \"Check\";\r\n    const loading = !(props.quizStarted || finished) || props.dataLoading;\r\n\r\n    useEffect(() => {\r\n        if (quizRef?.current) {\r\n            quizRef.current!.focus();\r\n        }\r\n    }, [quizRef]);\r\n\r\n    if (question) {\r\n        answers = [...question.incorrect_answers];\r\n        answers.splice(correctAnswerId, 0, question.correct_answer);\r\n    }\r\n\r\n    const resetSettings = () => {\r\n        setQuestionNumber(1);\r\n        setCorrectAnswers([]);\r\n        setFinished(false);\r\n        setInRevealMode(false)\r\n        props.initQuiz();\r\n    }\r\n\r\n    const handleButtonClick = () => {\r\n        if (noQuestionsFound) {\r\n            props.end();\r\n        } else if (finished) {\r\n            resetSettings();\r\n        } else if (inRevealMode) {\r\n            const isLastQuestion = questionNumber === props.questions.length;\r\n            setSelectedId(undefined);\r\n            setFinished(isLastQuestion);\r\n            setQuestionNumber(isLastQuestion ? questionNumber : questionNumber + 1);\r\n            setInRevealMode(false);\r\n        } else {\r\n            const isCorrect = selectedId === correctAnswerId\r\n            setCorrectAnswers([...correctAnswers, isCorrect])\r\n            setInRevealMode(true);\r\n        };\r\n    }\r\n\r\n    const handleAnswerPicked = (selectedAnswerId: number) => {\r\n        setSelectedId(selectedAnswerId);\r\n    }\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (!loading) {\r\n            switch (e.key) {\r\n                case KEYS.ENTER:\r\n                    handleButtonClick();\r\n                    break;\r\n                case KEYS.ESCAPE:\r\n                    props.quit();\r\n                    break;\r\n                case KEYS.ARROW_UP:\r\n                    if (!inRevealMode) {\r\n                        if (selectedId != null && selectedId > 0) {\r\n                            setSelectedId(selectedId - 1);\r\n                        } else {\r\n                            setSelectedId(answers.length - 1)\r\n                        }\r\n                    }\r\n                    break;\r\n                case KEYS.ARROW_DOWN:\r\n                    if (!inRevealMode) {\r\n                        if (selectedId != null && selectedId < answers.length - 1) {\r\n                            setSelectedId(selectedId + 1);\r\n                        } else {\r\n                            setSelectedId(0);\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (!inRevealMode && !isNaN(+e.key)) {\r\n                        const selectedIdFromKeyDown = +e.key - 1;\r\n                        selectedIdFromKeyDown <= answers.length - 1 && setSelectedId(selectedIdFromKeyDown);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n    function getContent() {\r\n        if (loading) {\r\n            return <Spinner />\r\n        } else if (noQuestionsFound) {\r\n            return <div>No questions found, please change your criteria</div>\r\n        } else if (finished) {\r\n            return <Summary\r\n                score={score}\r\n                questions={props.questions.map((q, i) => ({ question: q.question, answer: q.correct_answer, isCorrect: correctAnswers[i] }))} />\r\n        }\r\n        const currentQuestion = props.questions[questionId];\r\n        return <Question\r\n            question={currentQuestion.question}\r\n            category={currentQuestion.category}\r\n            reveal={inRevealMode}\r\n            answers={answers}\r\n            correctId={correctAnswerId}\r\n            onAnswerPicked={handleAnswerPicked}\r\n            selectedId={selectedId} />\r\n    }\r\n\r\n    return (\r\n        <styled.Quiz finished={finished} tabIndex={0} onKeyDown={handleKeyDown} ref={quizRef}>\r\n            {getContent()}\r\n            <styled.ButtonContainer>\r\n                <Button label={buttonLabel} onClick={handleButtonClick} />\r\n            </styled.ButtonContainer>\r\n            <NavBar\r\n                currentQuestionNumber={questionNumber}\r\n                questionsAmount={questionsAmount}\r\n                loading={props.dataLoading}\r\n                onQuit={props.quit}\r\n                finished={finished} />\r\n        </styled.Quiz>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ quiz, startPage }: AppState): StateProps => {\r\n    return {\r\n        questions: quiz.questions,\r\n        quizStarted: quiz.started,\r\n        dataLoading: quiz.fetching,\r\n        isDataAvailable: startPage.dataFetched,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, null, QuizActions>): DispatchProps => {\r\n    return {\r\n        end: () => dispatch(actions.endQuiz()),\r\n        initQuiz: () => dispatch(actions.initQuiz()),\r\n        quit: () => dispatch(actions.quizQuit()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import React from 'react';\nimport * as styled from './styles';\nimport { connect } from 'react-redux';\nimport Menu from './containers/Menu';\nimport Quiz from './containers/Quiz';\nimport { AppState } from \"./\";\n\ninterface StateProps {\n  quizStarted: boolean,\n  dataLoading: boolean,\n}\n\nconst App: React.FC<StateProps> = ({ quizStarted, dataLoading }) =>\n  <styled.App>\n    {quizStarted || dataLoading ? <Quiz /> : <Menu />}\n  </styled.App>\n\nconst mapStateToProps = ({quiz}: AppState): StateProps => {\n  return {\n    quizStarted: quiz.started,\n    dataLoading: quiz.fetching,\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","import * as actionTypes from '../actions/actionTypes';\r\nimport he from 'he';\r\n\r\nexport interface IQuestion {\r\n    category: string,\r\n    type: (\"multiple\" | \"boolean\"),\r\n    difficulty: (\"easy\" | \"medium\" | \"hard\"),\r\n    question: string,\r\n    correct_answer: string,\r\n    incorrect_answers: string[],\r\n    correctAnswerId: number,\r\n}\r\n\r\nexport interface QuizState {\r\n    started: boolean,\r\n    fetching: boolean,\r\n    questions: IQuestion[],\r\n};\r\n\r\nconst initialState: QuizState = {\r\n    started: false,\r\n    fetching: false,\r\n    questions: [],\r\n}\r\n\r\nconst shuffleAnswers = (state: QuizState, action: actionTypes.shuffleAnswers): QuizState => {\r\n    const { questions } = state;\r\n    const questionsWithAnswerId: IQuestion[] = [...questions];\r\n    questions.forEach((question, i) => {\r\n        let correctAnswerId = -1;\r\n        const answersAmmount = question.incorrect_answers.length + 1;\r\n        const isBoolType = answersAmmount === 2;\r\n        if (isBoolType) {\r\n            correctAnswerId = question.correct_answer === \"True\" ? 0 : 1;\r\n        } else {\r\n            correctAnswerId = Math.floor(Math.random() * answersAmmount);\r\n        }\r\n        questionsWithAnswerId[i].correctAnswerId = correctAnswerId;\r\n    });\r\n    return { ...state, questions: questionsWithAnswerId }\r\n}\r\n\r\nconst fetchQuestionsStart = (state: QuizState, action: actionTypes.fetchQuestionsStart): QuizState => {\r\n    return { ...state, fetching: true };\r\n}\r\n\r\nconst fetchQuestionsSuccess = (state: QuizState, action: actionTypes.fetchQuestionsSuccess): QuizState => {\r\n    const questions = action.questions.map(q => (\r\n        {\r\n            ...q,\r\n            category: he.decode(q.category),\r\n            question: he.decode(q.question),\r\n            correct_answer: he.decode(q.correct_answer),\r\n            incorrect_answers: q.incorrect_answers.map(incorrectAnswear => he.decode(incorrectAnswear)),\r\n        }\r\n    ));\r\n    return { ...state, questions, fetching: false };\r\n}\r\n\r\nconst fetchQuestionsFail = (state: QuizState, action: actionTypes.fetchQuestionsFail<any>): QuizState => {\r\n    console.log(action.error)\r\n    return { ...state, fetching: false };\r\n}\r\n\r\nconst quizStarted = (state: QuizState, action: actionTypes.quizStarted): QuizState => {\r\n    return { ...state, started: true }\r\n}\r\n\r\nconst quizEnded = (state: QuizState, action: actionTypes.endQuiz): QuizState => {\r\n    return { ...state, started: false }\r\n}\r\n\r\nconst quizQuit = (state: QuizState, action: actionTypes.quizQuit): QuizState => {\r\n    return { ...state, started: false }\r\n}\r\n\r\nconst reset = (state: QuizState, action: actionTypes.resetQuiz): QuizState => {\r\n    return initialState;\r\n}\r\n\r\nconst reducer = (state = initialState, action: actionTypes.QuizActions): QuizState => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_QUESTIONS_START: return fetchQuestionsStart(state, action);\r\n        case actionTypes.FETCH_QUESTIONS_SUCCESS: return fetchQuestionsSuccess(state, action);\r\n        case actionTypes.FETCH_QUESTIONS_FAIL: return fetchQuestionsFail(state, action);\r\n        case actionTypes.QUIZ_STARTED: return quizStarted(state, action);\r\n        case actionTypes.SHUFFLE_ANSWERS: return shuffleAnswers(state, action);\r\n        case actionTypes.QUIZ_ENDED: return quizEnded(state, action);\r\n        case actionTypes.QUIZ_QUIT: return quizQuit(state, action);\r\n        case actionTypes.RESET_QUIZ: return reset(state, action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nexport interface Category {\r\n    name: string, \r\n    id: number\r\n};\r\n\r\nexport interface ISetting<T> {\r\n    values: T[],\r\n    selected: T,\r\n}\r\n\r\nexport interface ISettings {\r\n    amount: ISetting<number>,\r\n    category: ISetting<Category>,\r\n    difficulty: ISetting<string>,\r\n    type: ISetting<string>,\r\n    apiURL: string,\r\n}\r\n\r\nexport interface StartPageState {\r\n    loading: boolean,\r\n    dataFetched: boolean,\r\n    settings: ISettings,\r\n}\r\n\r\nconst initialState: StartPageState = {\r\n    loading: false,\r\n    dataFetched: false,\r\n    settings: {\r\n        amount: {\r\n            values: [5, 10, 15, 20, 50],\r\n            selected: 5,\r\n        },\r\n        category: {\r\n            values: [{ name: 'Any Category', id: 0 }], // categories should be fetched from https://opentdb.com/api_category.php\r\n            selected: { name: 'Any Category', id: 0 },\r\n        },\r\n        difficulty: {\r\n            values: ['Easy', 'Medium', 'Hard', 'Any'],\r\n            selected: 'Any',\r\n        },\r\n        type: {\r\n            values: ['ABCD', 'True/False', 'Any'],\r\n            selected: 'Any',\r\n        },\r\n        apiURL: \"https://opentdb.com/api.php?amount=5&category=0&type=0&dificulty=0\",\r\n    }\r\n}\r\n\r\nconst fetchCategoriesStart = (state: StartPageState, action: actionTypes.fetchCategoriesStart): StartPageState => {\r\n    return { ...state, loading: true }\r\n}\r\n\r\nconst fetchCategoriesSuccess = (state: StartPageState, action: actionTypes.fetchCategoriesSuccess): StartPageState => {\r\n    const settings = {\r\n            ...state.settings,\r\n            category: {\r\n                ...state.settings.category,\r\n                values: [{name: 'Any Category',id: 0}].concat(action.categories),\r\n            }\r\n        }\r\n    return { ...state, loading: false, settings, dataFetched: true };\r\n}\r\n\r\nconst fetchCategoriesFail = (state: StartPageState, action: actionTypes.fetchCategoriesFail<{}>): StartPageState => {\r\n    console.log(\"Something went wrong\");\r\n    console.log(action.error);\r\n    return { ...state, loading: false }\r\n}\r\n\r\nconst setQuestionQuantity = (state: StartPageState, action: actionTypes.setQuestionQuantity): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        amount: {\r\n            ...state.settings.amount,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst setQuestionCategory = (state: StartPageState, action: actionTypes.setQuestionCategory): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        category: {\r\n            ...state.settings.category,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst setQuestionType = (state: StartPageState, action: actionTypes.setQuestionType): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        type: {\r\n            ...state.settings.type,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst setQuestionDifficulty = (state: StartPageState, action: actionTypes.setQuestionDifficulty): StartPageState => {\r\n    return {...state, settings: {\r\n        ...state.settings,\r\n        difficulty: {\r\n            ...state.settings.difficulty,\r\n            selected: action.value,\r\n        }\r\n    }};\r\n}\r\n\r\nconst resetStartPage = (state: StartPageState, action: actionTypes.resetStartPage): StartPageState => {\r\n    return initialState;\r\n}\r\n\r\nconst generateUrl = (state: StartPageState, action: actionTypes.generateURL): StartPageState => {\r\n    const { amount, category, difficulty, type } = state.settings;\r\n    const difficultyUrlValueMap = {\r\n        'Easy': 'easy',\r\n        'Medium': 'medium',\r\n        'Hard': 'hard',\r\n        'Any': 0,\r\n    };\r\n    const typeUrlValueMap = {\r\n        'ABCD': 'multiple',\r\n        'True/False': 'boolean',\r\n        'Any': 0,\r\n    }\r\n    const questionsQuantity = amount.selected;\r\n    const categoryID = category.values.filter(currCategory => currCategory.name === category.selected.name)[0].id;\r\n    const selectedDifficulty = difficultyUrlValueMap[difficulty.selected];\r\n    const selectedType = typeUrlValueMap[type.selected];\r\n    const apiURL = `https://opentdb.com/api.php?amount=${questionsQuantity}&category=${categoryID}&type=${selectedType}&dificulty=${selectedDifficulty}`;\r\n    return {...state, settings: {...state.settings, apiURL: apiURL}};\r\n}\r\n\r\nconst reducer = (state = initialState, action: actionTypes.StartPageActions): StartPageState => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_CATEGORIES_START: return fetchCategoriesStart(state, action);\r\n        case actionTypes.FETCH_CATEGORIES_SUCCESS: return fetchCategoriesSuccess(state, action);\r\n        case actionTypes.FETCH_CATEGORIES_FAIL: return fetchCategoriesFail(state, action);\r\n        case actionTypes.SET_QUESTION_QUANTITY: return setQuestionQuantity(state, action);\r\n        case actionTypes.SET_QUESTION_CATEGORY: return setQuestionCategory(state, action);\r\n        case actionTypes.SET_QUESTION_TYPE: return setQuestionType(state, action);\r\n        case actionTypes.SET_QUESTION_DIFFICULTY: return setQuestionDifficulty(state, action);\r\n        case actionTypes.GENERATE_URL: return generateUrl(state,action);\r\n        case actionTypes.RESET_START_PAGE: return resetStartPage(state,action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport quizReducer from './store/reducers/quiz';\nimport startPageReducer from './store/reducers/startPage';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\n    }\n}\n\nconst composeEnhancers = (process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null) || compose;\n\nconst rootReducer = combineReducers({\n    quiz: quizReducer,\n    startPage: startPageReducer,\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\nexport type AppState = ReturnType<typeof rootReducer>"],"sourceRoot":""}